[{"D:\\mike\\solmates\\app_frontend\\src\\index.js":"1","D:\\mike\\solmates\\app_frontend\\src\\serviceWorker.js":"2","D:\\mike\\solmates\\app_frontend\\src\\context\\UserContext.js":"3","D:\\mike\\solmates\\app_frontend\\src\\components\\App.js":"4","D:\\mike\\solmates\\app_frontend\\src\\context\\LayoutContext.js":"5","D:\\mike\\solmates\\app_frontend\\src\\themes\\index.js":"6","D:\\mike\\solmates\\app_frontend\\src\\components\\Layout\\Layout.js":"7","D:\\mike\\solmates\\app_frontend\\src\\pages\\error\\Error.js":"8","D:\\mike\\solmates\\app_frontend\\src\\pages\\login\\Login.js":"9","D:\\mike\\solmates\\app_frontend\\src\\themes\\default.js":"10","D:\\mike\\solmates\\app_frontend\\src\\pages\\login\\styles.js":"11","D:\\mike\\solmates\\app_frontend\\src\\pages\\error\\styles.js":"12","D:\\mike\\solmates\\app_frontend\\src\\components\\Layout\\styles.js":"13","D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\Charts.js":"14","D:\\mike\\solmates\\app_frontend\\src\\pages\\tables\\Tables.js":"15","D:\\mike\\solmates\\app_frontend\\src\\pages\\maps\\Maps.js":"16","D:\\mike\\solmates\\app_frontend\\src\\pages\\notifications\\Notifications.js":"17","D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\Sidebar.js":"18","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\Dashboard.js":"19","D:\\mike\\solmates\\app_frontend\\src\\components\\Header\\Header.js":"20","D:\\mike\\solmates\\app_frontend\\src\\pages\\icons\\Icons.js":"21","D:\\mike\\solmates\\app_frontend\\src\\components\\Header\\styles.js":"22","D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\components\\ApexLineChart.js":"23","D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\components\\ApexHeatmap.js":"24","D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\Dot.js":"25","D:\\mike\\solmates\\app_frontend\\src\\components\\PageTitle\\PageTitle.js":"26","D:\\mike\\solmates\\app_frontend\\src\\components\\Widget\\Widget.js":"27","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"28","D:\\mike\\solmates\\app_frontend\\src\\pages\\icons\\styles.js":"29","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\Table\\Table.js":"30","D:\\mike\\solmates\\app_frontend\\src\\components\\UserAvatar\\UserAvatar.js":"31","D:\\mike\\solmates\\app_frontend\\src\\components\\Notification\\Notification.js":"32","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\mock.js":"33","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\styles.js":"34","D:\\mike\\solmates\\app_frontend\\src\\pages\\notifications\\styles.js":"35","D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\styles.js":"36","D:\\mike\\solmates\\app_frontend\\src\\pages\\maps\\styles.js":"37","D:\\mike\\solmates\\app_frontend\\src\\components\\Wrappers\\Wrappers.js":"38","D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"39","D:\\mike\\solmates\\app_frontend\\src\\components\\Widget\\styles.js":"40","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"41","D:\\mike\\solmates\\app_frontend\\src\\components\\Notification\\styles.js":"42","D:\\mike\\solmates\\app_frontend\\src\\components\\PageTitle\\styles.js":"43","D:\\mike\\solmates\\app_frontend\\src\\components\\UserAvatar\\styles.js":"44","D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"45","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\useTable.js":"46","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\Popup.js":"47","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\PageHeader.js":"48","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\Notification.js":"49","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\ConfirmDialog.js":"50","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\useForm.js":"51","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Controls.js":"52","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Select.js":"53","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\DatePicker.js":"54","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\ActionButton.js":"55","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Button.js":"56","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\SearchInput.js":"57","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\LabelImgHelper.js":"58","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Checkbox.js":"59","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\RadioGroup.js":"60","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Chips.js":"61","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Label.js":"62","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\CryptoAddress.js":"63","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Input.js":"64","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\AutoInfo.js":"65","D:\\mike\\solmates\\app_frontend\\src\\ap_services\\commonService.js":"66","D:\\mike\\solmates\\app_frontend\\src\\ap_services\\tokenServices.js":"67","D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\wallet_select_button\\index.jsx":"68","D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\PhantomWallet.js":"69","D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\wallet-selector\\index.js":"70","D:\\mike\\solmates\\app_frontend\\src\\components\\theme.js":"71","D:\\mike\\solmates\\app_frontend\\src\\solmate\\config.js":"72","D:\\mike\\solmates\\app_frontend\\src\\solmate\\stake.js":"73","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Stake.js":"74","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Game.js":"75","D:\\mike\\solmates\\app_frontend\\src\\solmate\\get_stake_info.js":"76","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Reward.js":"77","D:\\mike\\solmates\\app_frontend\\src\\solmate\\reward.js":"78","D:\\mike\\solmates\\app_frontend\\src\\solmate\\layout.js":"79","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\StakeV2.js":"80","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_stake.js":"81","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_config.js":"82","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\RewardV2.js":"83","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_reward.js":"84","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_get_stake_info.js":"85","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\UnstakeV2.js":"86","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_unstake.js":"87","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_layout.js":"88","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_get_pwdm.js":"89","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\ChainInspector.js":"90","D:\\mike\\solmates\\app_frontend\\src\\solmate\\read_chain_inspector.js":"91","D:\\mike\\solmates\\app_frontend\\src\\solmate\\read_chain_common.js":"92","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\ExpandV2.js":"93","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_expand.js":"94","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_ciety.js":"95","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Readme.jsx":"96","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_list_wallet_nfts.js":"97"},{"size":950,"mtime":1635938475419,"results":"98","hashOfConfig":"99"},{"size":5083,"mtime":1635930839154,"results":"100","hashOfConfig":"99"},{"size":2053,"mtime":1635930839078,"results":"101","hashOfConfig":"99"},{"size":1979,"mtime":1640782700720,"results":"102","hashOfConfig":"99"},{"size":1444,"mtime":1640782323930,"results":"103","hashOfConfig":"99"},{"size":534,"mtime":1635930839158,"results":"104","hashOfConfig":"99"},{"size":4821,"mtime":1640785983986,"results":"105","hashOfConfig":"99"},{"size":1626,"mtime":1635930839110,"results":"106","hashOfConfig":"99"},{"size":9153,"mtime":1640782889618,"results":"107","hashOfConfig":"99"},{"size":3127,"mtime":1635938384943,"results":"108","hashOfConfig":"99"},{"size":3281,"mtime":1635930839130,"results":"109","hashOfConfig":"99"},{"size":1395,"mtime":1635930839114,"results":"110","hashOfConfig":"99"},{"size":710,"mtime":1635930839033,"results":"111","hashOfConfig":"99"},{"size":5790,"mtime":1635930839087,"results":"112","hashOfConfig":"99"},{"size":2146,"mtime":1635930839147,"results":"113","hashOfConfig":"99"},{"size":1010,"mtime":1635930839133,"results":"114","hashOfConfig":"99"},{"size":13862,"mtime":1635930839140,"results":"115","hashOfConfig":"99"},{"size":3601,"mtime":1640800643373,"results":"116","hashOfConfig":"99"},{"size":16400,"mtime":1635969153053,"results":"117","hashOfConfig":"99"},{"size":10565,"mtime":1640782345111,"results":"118","hashOfConfig":"99"},{"size":391433,"mtime":1635930839121,"results":"119","hashOfConfig":"99"},{"size":4075,"mtime":1635942802603,"results":"120","hashOfConfig":"99"},{"size":1396,"mtime":1635930839092,"results":"121","hashOfConfig":"99"},{"size":1909,"mtime":1635930839090,"results":"122","hashOfConfig":"99"},{"size":902,"mtime":1635930839049,"results":"123","hashOfConfig":"99"},{"size":447,"mtime":1635930839040,"results":"124","hashOfConfig":"99"},{"size":2581,"mtime":1635930839066,"results":"125","hashOfConfig":"99"},{"size":4160,"mtime":1635930839099,"results":"126","hashOfConfig":"99"},{"size":812,"mtime":1635930839124,"results":"127","hashOfConfig":"99"},{"size":1323,"mtime":1635930839105,"results":"128","hashOfConfig":"99"},{"size":620,"mtime":1635930839062,"results":"129","hashOfConfig":"99"},{"size":3413,"mtime":1635930839035,"results":"130","hashOfConfig":"99"},{"size":4288,"mtime":1635930839106,"results":"131","hashOfConfig":"99"},{"size":3000,"mtime":1635930839108,"results":"132","hashOfConfig":"99"},{"size":1943,"mtime":1635930839145,"results":"133","hashOfConfig":"99"},{"size":1363,"mtime":1635930839059,"results":"134","hashOfConfig":"99"},{"size":178,"mtime":1635930839137,"results":"135","hashOfConfig":"99"},{"size":3971,"mtime":1635930839073,"results":"136","hashOfConfig":"99"},{"size":4589,"mtime":1635930839052,"results":"137","hashOfConfig":"99"},{"size":1015,"mtime":1635930839070,"results":"138","hashOfConfig":"99"},{"size":1075,"mtime":1635930839102,"results":"139","hashOfConfig":"99"},{"size":1040,"mtime":1635930839037,"results":"140","hashOfConfig":"99"},{"size":482,"mtime":1635930839043,"results":"141","hashOfConfig":"99"},{"size":291,"mtime":1635930839064,"results":"142","hashOfConfig":"99"},{"size":1474,"mtime":1635930839055,"results":"143","hashOfConfig":"99"},{"size":3870,"mtime":1637223093081,"results":"144","hashOfConfig":"99"},{"size":1380,"mtime":1627331240312,"results":"145","hashOfConfig":"99"},{"size":1412,"mtime":1627331240311,"results":"146","hashOfConfig":"99"},{"size":1001,"mtime":1627331240310,"results":"147","hashOfConfig":"99"},{"size":2245,"mtime":1627331240308,"results":"148","hashOfConfig":"99"},{"size":1362,"mtime":1637560867236,"results":"149","hashOfConfig":"99"},{"size":741,"mtime":1637748271757,"results":"150","hashOfConfig":"99"},{"size":920,"mtime":1627331240320,"results":"151","hashOfConfig":"99"},{"size":814,"mtime":1627331240317,"results":"152","hashOfConfig":"99"},{"size":875,"mtime":1627331240315,"results":"153","hashOfConfig":"99"},{"size":739,"mtime":1627331240315,"results":"154","hashOfConfig":"99"},{"size":593,"mtime":1637652813773,"results":"155","hashOfConfig":"99"},{"size":584,"mtime":1637559895082,"results":"156","hashOfConfig":"99"},{"size":753,"mtime":1637857323567,"results":"157","hashOfConfig":"99"},{"size":802,"mtime":1627331240319,"results":"158","hashOfConfig":"99"},{"size":936,"mtime":1637741343013,"results":"159","hashOfConfig":"99"},{"size":520,"mtime":1637734811228,"results":"160","hashOfConfig":"99"},{"size":1630,"mtime":1640453302295,"results":"161","hashOfConfig":"99"},{"size":476,"mtime":1627331240318,"results":"162","hashOfConfig":"99"},{"size":7937,"mtime":1640452606614,"results":"163","hashOfConfig":"99"},{"size":3170,"mtime":1637740305762,"results":"164","hashOfConfig":"99"},{"size":238,"mtime":1637567977196,"results":"165","hashOfConfig":"99"},{"size":3240,"mtime":1640707244907,"results":"166","hashOfConfig":"99"},{"size":13401,"mtime":1637983637648,"results":"167","hashOfConfig":"99"},{"size":5368,"mtime":1637852065223,"results":"168","hashOfConfig":"99"},{"size":190,"mtime":1637856578585,"results":"169","hashOfConfig":"99"},{"size":576,"mtime":1640503708137,"results":"170","hashOfConfig":"99"},{"size":7589,"mtime":1639766531816,"results":"171","hashOfConfig":"99"},{"size":5511,"mtime":1638116455726,"results":"172","hashOfConfig":"99"},{"size":2922,"mtime":1640541356030,"results":"173","hashOfConfig":"99"},{"size":4240,"mtime":1639068667052,"results":"174","hashOfConfig":"99"},{"size":3440,"mtime":1638814297871,"results":"175","hashOfConfig":"99"},{"size":3802,"mtime":1638815758405,"results":"176","hashOfConfig":"99"},{"size":1557,"mtime":1638901480808,"results":"177","hashOfConfig":"99"},{"size":5420,"mtime":1640798819263,"results":"178","hashOfConfig":"99"},{"size":5848,"mtime":1640958596579,"results":"179","hashOfConfig":"99"},{"size":1673,"mtime":1640960357622,"results":"180","hashOfConfig":"99"},{"size":3260,"mtime":1640803469438,"results":"181","hashOfConfig":"99"},{"size":3101,"mtime":1640803495182,"results":"182","hashOfConfig":"99"},{"size":1442,"mtime":1640541707854,"results":"183","hashOfConfig":"99"},{"size":2918,"mtime":1640719782091,"results":"184","hashOfConfig":"99"},{"size":10060,"mtime":1640899808038,"results":"185","hashOfConfig":"99"},{"size":555,"mtime":1640413424220,"results":"186","hashOfConfig":"99"},{"size":2256,"mtime":1640371839786,"results":"187","hashOfConfig":"99"},{"size":5958,"mtime":1640900797582,"results":"188","hashOfConfig":"99"},{"size":7326,"mtime":1640882620045,"results":"189","hashOfConfig":"99"},{"size":3604,"mtime":1640882471989,"results":"190","hashOfConfig":"99"},{"size":3645,"mtime":1640802634572,"results":"191","hashOfConfig":"99"},{"size":3122,"mtime":1640801200754,"results":"192","hashOfConfig":"99"},{"size":2318,"mtime":1640768560758,"results":"193","hashOfConfig":"99"},{"size":4206,"mtime":1640794745586,"results":"194","hashOfConfig":"99"},{"size":2512,"mtime":1640798687109,"results":"195","hashOfConfig":"99"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},"yxx688",{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"198"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"198"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"198"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"198"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"198"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"198"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"198"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"198"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"198"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"198"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"198"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"198"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"198"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"198"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"198"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"198"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"362"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"366"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"198"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"362"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"376"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"376"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"362"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"198"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"198"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"198"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"198"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"198"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"198"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"198"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"198"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"198"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"198"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"198"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"198"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"198"},"D:\\mike\\solmates\\app_frontend\\src\\index.js",[],["433","434"],"D:\\mike\\solmates\\app_frontend\\src\\serviceWorker.js",[],"D:\\mike\\solmates\\app_frontend\\src\\context\\UserContext.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\App.js",["435","436","437","438"],"import React from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\n// components\r\nimport Layout from \"./Layout\";\r\n\r\n// pages\r\nimport Error from \"../pages/error\";\r\nimport Login from \"../pages/login\";\r\n\r\n// context\r\nimport { useUserState } from \"../context/UserContext\";\r\nimport { ThemeProvider, CssBaseline, Typography } from \"@material-ui/core\";\r\nimport theme from \"./theme\";\r\n\r\nexport default function App() {\r\n  // global\r\n  var { isAuthenticated } = useUserState();\r\n\r\n  return (\r\n    // <ThemeProvider theme={theme}>\r\n    //   <CssBaseline />\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/app/StakeV2\" />} />\r\n        <Route\r\n          exact\r\n          path=\"/app\"\r\n          render={() => <Redirect to=\"/app/StakeV2\" />}\r\n        />\r\n        <PrivateRoute path=\"/app\" component={Layout} />\r\n        <PublicRoute path=\"/login\" component={Login} />\r\n        <Route component={Error} />\r\n      </Switch>\r\n    </HashRouter>\r\n    // </ThemeProvider>\r\n  );\r\n\r\n  // #######################################################################\r\n\r\n  function PrivateRoute({ component, ...rest }) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={props =>\r\n          isAuthenticated ? (\r\n            React.createElement(component, props)\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: {\r\n                  from: props.location,\r\n                },\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  function PublicRoute({ component, ...rest }) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={props =>\r\n          isAuthenticated ? (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/\",\r\n              }}\r\n            />\r\n          ) : (\r\n            React.createElement(component, props)\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\context\\LayoutContext.js",[],"D:\\mike\\solmates\\app_frontend\\src\\themes\\index.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Layout\\Layout.js",["439","440","441","442","443","444"],"import React from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport {Box, IconButton, Link} from '@material-ui/core'\r\nimport Icon from '@mdi/react'\r\n\r\n//icons\r\nimport {\r\n  mdiFacebook as FacebookIcon,\r\n  mdiTwitter as TwitterIcon,\r\n  mdiGithub as GithubIcon,\r\n} from '@mdi/js'\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Header from \"../Header\";\r\nimport Sidebar from \"../Sidebar\";\r\n\r\n// pages\r\nimport Dashboard from \"../../pages/dashboard\";\r\nimport Notifications from \"../../pages/notifications\";\r\nimport Maps from \"../../pages/maps\";\r\nimport Tables from \"../../pages/tables\";\r\nimport Icons from \"../../pages/icons\";\r\nimport Charts from \"../../pages/charts\";\r\n\r\nimport StakeV2 from \"../../pages/solmate/StakeV2\";\r\nimport Game from \"../../pages/solmate/Game\";\r\nimport RewardV2 from \"../../pages/solmate/RewardV2\";\r\nimport ExpandV2 from \"../../pages/solmate/ExpandV2\";\r\nimport UnstakeV2 from \"../../pages/solmate/UnstakeV2\";\r\nimport ChainInspector from \"../../pages/solmate/ChainInspector\";\r\nimport Readme from \"../../pages/solmate/Readme.jsx\";\r\n\r\n// context\r\nimport { useLayoutState } from \"../../context/LayoutContext\";\r\n\r\nfunction Layout(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <>\r\n          <Header history={props.history} />\r\n          <Sidebar />\r\n          <div\r\n            className={classnames(classes.content, {\r\n              [classes.contentShift]: layoutState.isSidebarOpened,\r\n            })}\r\n          >\r\n            <div className={classes.fakeToolbar} />\r\n            <Switch>\r\n              <Route path=\"/app/dashboard\" component={Dashboard} />\r\n\r\n              <Route path=\"/app/StakeV2\" component={StakeV2} />\r\n              <Route path=\"/app/Game\" component={Game} />\r\n              <Route path=\"/app/RewardV2\" component={RewardV2} />\r\n              <Route path=\"/app/ExpandV2\" component={ExpandV2} />\r\n              <Route path=\"/app/UnstakeV2\" component={UnstakeV2} />\r\n              <Route path=\"/app/ChainInspector\" component={ChainInspector} />\r\n              <Route path=\"/app/Readme\" component={Readme} />\r\n\r\n              <Route path=\"/app/tables\" component={Tables} />\r\n              <Route path=\"/app/notifications\" component={Notifications} />\r\n              <Route\r\n                exact\r\n                path=\"/app/ui\"\r\n                render={() => <Redirect to=\"/app/ui/icons\" />}\r\n              />\r\n              <Route path=\"/app/ui/maps\" component={Maps} />\r\n              <Route path=\"/app/ui/icons\" component={Icons} />\r\n              <Route path=\"/app/ui/charts\" component={Charts} />\r\n            </Switch>\r\n            <Box\r\n              mt={5}\r\n              width={\"100%\"}\r\n              display={\"flex\"}\r\n              alignItems={\"center\"}\r\n              justifyContent=\"space-between\"\r\n            >\r\n              {/* <div>\r\n                <Link\r\n                  color={'primary'}\r\n                  href={'https://flatlogic.com/'}\r\n                  target={'_blank'}\r\n                  className={classes.link}\r\n                >\r\n                  Flatlogic\r\n                </Link>\r\n                <Link\r\n                  color={'primary'}\r\n                  href={'https://flatlogic.com/about'}\r\n                  target={'_blank'}\r\n                  className={classes.link}\r\n                >\r\n                  About Us\r\n                </Link>\r\n                <Link\r\n                  color={'primary'}\r\n                  href={'https://flatlogic.com/blog'}\r\n                  target={'_blank'}\r\n                  className={classes.link}\r\n                >\r\n                  Blog\r\n                </Link>\r\n              </div>\r\n              <div>\r\n                <Link\r\n                  href={'https://www.facebook.com/flatlogic'}\r\n                  target={'_blank'}\r\n                >\r\n                  <IconButton aria-label=\"facebook\">\r\n                    <Icon\r\n                      path={FacebookIcon}\r\n                      size={1}\r\n                      color=\"#6E6E6E99\"\r\n                    />\r\n                  </IconButton>\r\n                </Link>\r\n                <Link\r\n                  href={'https://twitter.com/flatlogic'}\r\n                  target={'_blank'}\r\n                >\r\n                  <IconButton aria-label=\"twitter\">\r\n                    <Icon\r\n                      path={TwitterIcon}\r\n                      size={1}\r\n                      color=\"#6E6E6E99\"\r\n                    />\r\n                  </IconButton>\r\n                </Link>\r\n              </div> */}\r\n            </Box>\r\n          </div>\r\n        </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Layout);\r\n","D:\\mike\\solmates\\app_frontend\\src\\pages\\error\\Error.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\login\\Login.js",[],"D:\\mike\\solmates\\app_frontend\\src\\themes\\default.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\login\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\error\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Layout\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\Charts.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\tables\\Tables.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\maps\\Maps.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\notifications\\Notifications.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\Sidebar.js",["445","446","447","448","449","450","451","452"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  Home as HomeIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  FormatSize as TypographyIcon,\r\n  FilterNone as UIElementsIcon,\r\n  BorderAll as TableIcon,\r\n  QuestionAnswer as SupportIcon,\r\n  LibraryBooks as LibraryIcon,\r\n  HelpOutline as FAQIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\nimport Dot from \"./components/Dot\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  { id: 52, type: \"title\", label: \"SOLMATE\" },\r\n  { id: 53, label: \"Stake\", link: \"/app/StakeV2\", icon: <TypographyIcon />, },\r\n  { id: 54, label: \"Extend\", link: \"/app/ExpandV2\", icon: <TypographyIcon />, },\r\n  { id: 55, label: \"Unstake\", link: \"/app/UnstakeV2\", icon: <TypographyIcon />, },\r\n  { id: 56, label: \"Reward\", link: \"/app/RewardV2\", icon: <TypographyIcon />, },\r\n  { id: 57, label: \"Game\", link: \"/app/Game\", icon: <TypographyIcon />, },\r\n  { id: 58, label: \"Inspector\", link: \"/app/ChainInspector\", icon: <TypographyIcon />, },\r\n  { id: 59, label: \"README\", link: \"/app/Readme\", icon: <TypographyIcon />, },\r\n  \r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function() {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map(link => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\Dashboard.js",["453","454","455"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  LineChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n} from \"recharts\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport mock from \"./mock\";\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport BigStat from \"./components/BigStat/BigStat\";\r\nimport ImgDashboard from \"../../images/dashboard.png\";\r\n\r\nconst mainChartData = getMainChartData();\r\nconst PieChartData = [\r\n  { name: \"Group A\", value: 400, color: \"primary\" },\r\n  { name: \"Group B\", value: 300, color: \"secondary\" },\r\n  { name: \"Group C\", value: 300, color: \"warning\" },\r\n  { name: \"Group D\", value: 200, color: \"success\" },\r\n];\r\n\r\nexport default function Dashboard(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Dashboard, just randomly put something here, maybe we like to replace it with something else, like the screenshot from Zapper below\" button={<Button\r\n      variant=\"contained\"\r\n      size=\"medium\"\r\n      color=\"secondary\"\r\n    >\r\n        Latest Reports\r\n    </Button>} />\r\n        <img src={ImgDashboard} alt=\"AP\"  style={{ marginTop: '20px' }} />\r\n      <Grid container spacing={4}>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          \r\n          <Widget\r\n            title=\"Visits Today\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n              <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                12, 678\r\n              </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n              <LineChart\r\n                width={100}\r\n                height={30}\r\n                data={[\r\n                  { value: 10 },\r\n                  { value: 15 },\r\n                  { value: 10 },\r\n                  { value: 17 },\r\n                  { value: 18 },\r\n                ]}\r\n              >\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"value\"\r\n                  stroke={theme.palette.success.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                />\r\n              </LineChart>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Registrations\r\n                </Typography>\r\n                <Typography size=\"md\">860</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Sign Out\r\n                </Typography>\r\n                <Typography size=\"md\">32</Typography>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                  Rate\r\n                </Typography>\r\n                <Typography size=\"md\">3.25%</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"App Performance\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.performanceLegendWrapper}>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"warning\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  Integration\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"primary\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  SDK\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            <div className={classes.progressSection}>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                Integration\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={77}\r\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                SDK\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={73}\r\n                classes={{ barColorPrimary: classes.progressBarWarning }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Server Overview\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullHeightBody}\r\n          >\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                60% / 37°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.secondary.main}\r\n                      fill={theme.palette.secondary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                54% / 31°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.primary.main}\r\n                      fill={theme.palette.primary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                57% / 21°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.warning.main}\r\n                      fill={theme.palette.warning.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6}>\r\n                <ResponsiveContainer width=\"100%\" height={144}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={PieChartData}\r\n                      innerRadius={30}\r\n                      outerRadius={40}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {PieChartData.map((entry, index) => (\r\n                        <Cell\r\n                          key={`cell-${index}`}\r\n                          fill={theme.palette[entry.color].main}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <div className={classes.pieChartLegendWrapper}>\r\n                  {PieChartData.map(({ name, value, color }, index) => (\r\n                    <div key={color} className={classes.legendItemContainer}>\r\n                      <Dot color={color} />\r\n                      <Typography style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\r\n                        &nbsp;{name}&nbsp;\r\n                      </Typography>\r\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                        &nbsp;{value}\r\n                      </Typography>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            bodyClass={classes.mainChartBody}\r\n            header={\r\n              <div className={classes.mainChartHeader}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                >\r\n                  Daily Line Chart\r\n                </Typography>\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"warning\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Tablet\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"primary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Mobile\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"secondary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Desktop\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <Select\r\n                  value={mainChartState}\r\n                  onChange={e => setMainChartState(e.target.value)}\r\n                  input={\r\n                    <OutlinedInput\r\n                      labelWidth={0}\r\n                      classes={{\r\n                        notchedOutline: classes.mainChartSelectRoot,\r\n                        input: classes.mainChartSelect,\r\n                      }}\r\n                    />\r\n                  }\r\n                  autoWidth\r\n                >\r\n                  <MenuItem value=\"daily\">Daily</MenuItem>\r\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                </Select>\r\n              </div>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\r\n              <ComposedChart\r\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\r\n                data={mainChartData}\r\n              >\r\n                <YAxis\r\n                  ticks={[0, 2500, 5000, 7500]}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <XAxis\r\n                  tickFormatter={i => i + 1}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <Area\r\n                  type=\"natural\"\r\n                  dataKey=\"desktop\"\r\n                  fill={theme.palette.background.light}\r\n                  strokeWidth={0}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"mobile\"\r\n                  stroke={theme.palette.primary.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"linear\"\r\n                  dataKey=\"tablet\"\r\n                  stroke={theme.palette.warning.main}\r\n                  strokeWidth={2}\r\n                  dot={{\r\n                    stroke: theme.palette.warning.dark,\r\n                    strokeWidth: 2,\r\n                    fill: theme.palette.warning.main,\r\n                  }}\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Widget>\r\n        </Grid>\r\n        {/* {mock.bigStat.map(stat => (\r\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\r\n            <BigStat {...stat} />\r\n          </Grid>\r\n        ))}\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            title=\"Support Requests\"\r\n            upperTitle\r\n            noBodyPadding\r\n            bodyClass={classes.tableWidget}\r\n          >\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid> */}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n// #######################################################################\r\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\r\n  var array = new Array(length).fill();\r\n  let lastValue;\r\n\r\n  return array.map((item, index) => {\r\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\r\n\r\n    while (\r\n      randomValue <= min ||\r\n      randomValue >= max ||\r\n      (lastValue && randomValue - lastValue > maxDiff)\r\n    ) {\r\n      randomValue = Math.floor(Math.random() * multiplier + 1);\r\n    }\r\n\r\n    lastValue = randomValue;\r\n\r\n    return { value: randomValue };\r\n  });\r\n}\r\n\r\nfunction getMainChartData() {\r\n  var resultArray = [];\r\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\r\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\r\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\r\n\r\n  for (let i = 0; i < tablet.length; i++) {\r\n    resultArray.push({\r\n      tablet: tablet[i].value,\r\n      desktop: desktop[i].value,\r\n      mobile: mobile[i].value,\r\n    });\r\n  }\r\n\r\n  return resultArray;\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\components\\Header\\Header.js",["456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487"],"import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  InputBase,\r\n  Menu,\r\n  MenuItem,\r\n  Fab,\r\n  Link\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  MailOutline as MailIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  Search as SearchIcon,\r\n  Send as SendIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography, Button } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\n\r\nimport Logo from '../../images/logo.png';\r\n\r\nconst messages = [\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"Jane Hew\",\r\n    message: \"Hey! How is it going?\",\r\n    time: \"9:32\",\r\n  },\r\n  {\r\n    id: 1,\r\n    variant: \"success\",\r\n    name: \"Lloyd Brown\",\r\n    message: \"Check out my new Dashboard\",\r\n    time: \"9:18\",\r\n  },\r\n  {\r\n    id: 2,\r\n    variant: \"primary\",\r\n    name: \"Mark Winstein\",\r\n    message: \"I want rearrange the appointment\",\r\n    time: \"9:15\",\r\n  },\r\n  {\r\n    id: 3,\r\n    variant: \"secondary\",\r\n    name: \"Liana Dutti\",\r\n    message: \"Good news from sale department\",\r\n    time: \"9:09\",\r\n  },\r\n];\r\n\r\nconst notifications = [\r\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\r\n  {\r\n    id: 1,\r\n    color: \"success\",\r\n    type: \"info\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    id: 2,\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    id: 3,\r\n    color: \"primary\",\r\n    type: \"e-commerce\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  var [mailMenu, setMailMenu] = useState(null);\r\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\r\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\r\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowBackIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        {/* <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n          React Material Admin\r\n        </Typography> */}\r\n        {/* <img src={Logo} alt=\"AP\" width=\"165\" /> */}\r\n        <div className={classes.grow} />\r\n        {/* <Button component={Link} href=\"https://flatlogic.com/templates/react-material-admin-full\" variant={\"outlined\"} color={\"secondary\"} className={classes.purchaseBtn}>Unlock full version</Button> */}\r\n        {/* <div\r\n          className={classNames(classes.search, {\r\n            [classes.searchFocused]: isSearchOpen,\r\n          })}\r\n        >\r\n          <div\r\n            className={classNames(classes.searchIcon, {\r\n              [classes.searchIconOpened]: isSearchOpen,\r\n            })}\r\n            onClick={() => setSearchOpen(!isSearchOpen)}\r\n          >\r\n            <SearchIcon classes={{ root: classes.headerIcon }} />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setNotificationsMenu(e.currentTarget);\r\n            setIsNotificationsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isNotificationsUnread ? notifications.length : null}\r\n            color=\"warning\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setMailMenu(e.currentTarget);\r\n            setIsMailsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isMailsUnread ? messages.length : null}\r\n            color=\"secondary\"\r\n          >\r\n            <MailIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={e => setProfileMenu(e.currentTarget)}\r\n        >\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              New Messages\r\n            </Typography>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              component=\"a\"\r\n              color=\"secondary\"\r\n            >\r\n              {messages.length} New Messages\r\n            </Typography>\r\n          </div>\r\n          {messages.map(message => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <div className={classes.messageNotificationSide}>\r\n                <UserAvatar color={message.variant} name={message.name} />\r\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.time}\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                className={classNames(\r\n                  classes.messageNotificationSide,\r\n                  classes.messageNotificationBodySide,\r\n                )}\r\n              >\r\n                <Typography weight=\"medium\" gutterBottom>\r\n                  {message.name}\r\n                </Typography>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.message}\r\n                </Typography>\r\n              </div>\r\n            </MenuItem>\r\n          ))}\r\n          <Fab\r\n            variant=\"extended\"\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            className={classes.sendMessageButton}\r\n          >\r\n            Send New Message\r\n            <SendIcon className={classes.sendButtonIcon} />\r\n          </Fab>\r\n        </Menu>\r\n        <Menu\r\n          id=\"notifications-menu\"\r\n          open={Boolean(notificationsMenu)}\r\n          anchorEl={notificationsMenu}\r\n          onClose={() => setNotificationsMenu(null)}\r\n          className={classes.headerMenu}\r\n          disableAutoFocusItem\r\n        >\r\n          {notifications.map(notification => (\r\n            <MenuItem\r\n              key={notification.id}\r\n              onClick={() => setNotificationsMenu(null)}\r\n              className={classes.headerMenuItem}\r\n            >\r\n              <Notification {...notification} typographyVariant=\"inherit\" />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              John Smith\r\n            </Typography>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              component=\"a\"\r\n              color=\"primary\"\r\n              href=\"https://flatlogic.com\"\r\n            >\r\n              Flalogic.com\r\n            </Typography>\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Profile\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Tasks\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Messages\r\n          </MenuItem>\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              Sign Out\r\n            </Typography>\r\n          </div>\r\n        </Menu> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\pages\\icons\\Icons.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Header\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\components\\ApexLineChart.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\Dot.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\PageTitle\\PageTitle.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Widget\\Widget.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\icons\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\UserAvatar\\UserAvatar.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Notification\\Notification.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\mock.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\notifications\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\maps\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Wrappers\\Wrappers.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Widget\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Notification\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\PageTitle\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\UserAvatar\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\useTable.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\Popup.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\PageHeader.js",["488"],"import React from 'react'\r\nimport { Paper, Card, Typography, makeStyles, Button } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: '#fdfdff'\r\n    },\r\n    pageHeader:{\r\n        padding:theme.spacing(4),\r\n        display:'flex',\r\n        marginBottom:theme.spacing(2)\r\n    },\r\n    pageIcon:{\r\n        display:'inline-block',\r\n        padding:theme.spacing(2),\r\n        color:'#3c44b1'\r\n    },\r\n    pageTitle:{\r\n        paddingLeft:theme.spacing(4),\r\n        '& .MuiTypography-subtitle2':{\r\n            opacity:'0.6'\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function PageHeader(props) {\r\n\r\n    const classes = useStyles();\r\n    const { title, subTitle, icon } = props;\r\n    return (\r\n        <Paper elevation={0} square className={classes.root}>\r\n            <div className={classes.pageHeader}>\r\n                <Card className={classes.pageIcon}>\r\n                    {icon}\r\n                </Card>\r\n                <div className={classes.pageTitle}>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\">\r\n                        {title}</Typography>\r\n                    <Typography\r\n                        variant=\"subtitle2\"\r\n                        component=\"div\">\r\n                        {subTitle}</Typography>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\Notification.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\ConfirmDialog.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\useForm.js",[],["489","490"],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Controls.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Select.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\DatePicker.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\ActionButton.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Button.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\SearchInput.js",["491","492","493","494","495","496","497"],"import React from 'react'\r\nimport { FormControl, InputLabel, FormHelperText, Input, TextField, OutlinedInput  } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\nexport default function SearchInput(props) {\r\n\r\n    const { label, value, handleClick, items } = props;\r\n\r\n    return (\r\n        <TextField\r\n            id=\"standard-name\"\r\n            label={label}\r\n            value={value}\r\n            InputProps={{ endAdornment: <CreateIcon style={{cursor:'hand'}} onClick={handleClick} /> }}\r\n        />\r\n    )\r\n}","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\LabelImgHelper.js",["498","499","500","501","502"],"import React from 'react'\r\nimport { FormControl, FormLabel, Chip, Avatar, IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default function LabelImgHelper(props) {\r\n\r\n    const { name, symbol, logo_uri, value, handleClick, items } = props;\r\n\r\n    return (\r\n        <FormControl>\r\n\r\n            <Chip\r\n                avatar={<Avatar alt=\"Natacha\" src={logo_uri} />}\r\n                label={name + '/' + symbol}\r\n                variant=\"outlined\"\r\n                onClick={handleClick}\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Checkbox.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\RadioGroup.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Chips.js",["503","504","505"],"import React from 'react'\r\nimport { Stack, Chip } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Chips(props) {\r\n\r\n    const { label, render, handleClick, ...other } = props;\r\n    console.log('render=======', render);\r\n    return (\r\n        <Card sx={{ minWidth: 275 }}>\r\n            <CardContent>\r\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\r\n                    {label}\r\n                </Typography>\r\n                {render}\r\n            </CardContent>\r\n            <CardActions>\r\n                <CreateIcon onClick={handleClick} style={{cursor:'hand'}}/>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Label.js",["506","507"],"import React from 'react'\r\nimport { FormLabel, TextField} from '@material-ui/core';\r\n\r\nexport default function Label(props) {\r\n\r\n    const { label, value, ...other } = props;\r\n    return (\r\n        <>\r\n            {/* <FormLabel component=\"legend\">{label}</FormLabel>\r\n            <FormLabel component=\"legend\">{value}</FormLabel> */}\r\n            \r\n        <TextField\r\n            variant=\"outlined\"\r\n            label={label}\r\n            value={value}\r\n            disabled='true'\r\n        />\r\n        </>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\CryptoAddress.js",["508","509","510","511","512","513"],"import React from 'react'\r\nimport { Stack, Chip } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nexport default function CryptoAddress(props) {\r\n\r\n    const { value, ...other } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        navigator.clipboard.writeText(value).then(function () {\r\n            console.log('Copied to clipboard: ' + value);\r\n            setOpen(true);\r\n        }, function (err) {\r\n            console.error('Async: Could not copy text: ', err);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <TextField\r\n                id=\"standard-name\"\r\n                value={value}\r\n                InputProps={{ disableUnderline: true, endAdornment: <FileCopyIcon color='action' style={{ cursor: 'hand', width: '15px', height: '15px' }} onClick={handleClick} /> }}\r\n                disabled={true}\r\n                fullWidth\r\n            />\r\n            <Snackbar\r\n                autoHideDuration={2000}\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                open={open}\r\n                onClose={handleClose}\r\n                message={'Copied: ' + value}\r\n            // key={vertical + horizontal}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\Input.js",[],"D:\\mike\\solmates\\app_frontend\\src\\ap_components\\controls\\AutoInfo.js",["514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546"],"import React from 'react'\r\nimport { Stack, Chip } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Link from '@material-ui/core/Link';\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit * 3,\r\n    },\r\n});\r\n\r\nexport default function AutoInfo(props) {\r\n    const styles = theme => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing.unit * 3,\r\n        },\r\n    });\r\n    const { title, entity, addressFields, ignorePaths, ...other } = props;\r\n\r\n    const format = (prop) => {\r\n        if (!prop) return;\r\n\r\n        let rtn = '';\r\n        prop.split('_').map(t => {\r\n            let tmp = t.substring(0, 1).toUpperCase();\r\n            if (rtn != '') rtn += ' ';\r\n            rtn += tmp + t.substring(1);\r\n        });\r\n        return rtn;\r\n    }\r\n    const treefy = (parent, fieldName, value) => {\r\n        if (value == null || value == undefined) {\r\n            let child = { type: 'leaf', name: fieldName, value: '', depth: parent.depth + 1, path: (fieldName ? parent.path + '/' + fieldName : parent.path), parent: parent }\r\n            parent['child'].push(child)\r\n        } else if (Array.isArray(value)) {\r\n            let child1 = { type: 'array', name: fieldName, depth: parent.depth + 1, child: [], path: (fieldName ? parent.path + '/' + fieldName : parent.path), parent: parent }\r\n            parent['child'].push(child1)\r\n            let ind = 0\r\n            value.map(item => {\r\n                // let child2 = { name: fieldName, depth: child1.depth + 1, child: [], path:child1.path+'/'+fieldName }\r\n                // child1['child'].push(child2)\r\n                treefy(child1, (++ind), item)\r\n            })\r\n        } else if (typeof value == typeof {}) {\r\n            let child1 = { type: 'object', name: fieldName, depth: parent.depth + 1, child: [], path: (fieldName ? parent.path + '/' + fieldName : parent.path), parent: parent }\r\n            parent['child'].push(child1)\r\n            Object.keys(value).map(prop => {\r\n                // let child = { name: prop, depth: parent.depth + 1, child: [], path:parent.path+'/'+fieldName }\r\n                // parent['child'].push(child)\r\n                treefy(child1, prop, value[prop])\r\n            })\r\n        } else {\r\n            parent['child'].push({ type: 'leaf', name: fieldName, value: value, depth: parent.depth + 1, path: (fieldName ? parent.path + '/' + fieldName : parent.path), parent: parent })\r\n        }\r\n    }\r\n\r\n    const leaf = (node, result) => {\r\n        if (node['type'] == 'leaf') {\r\n            result.push(node)\r\n        } else {\r\n            node.child.map(c => {\r\n                leaf(c, result)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const tree = (obj) => {\r\n        let root = { path: '', child: [], type: 'root', depth: 0 }\r\n        treefy(root, null, obj)\r\n\r\n        let result = []\r\n        leaf(root, result)\r\n        result.sort((a, b) => (a.path > b.path) ? 1 : ((b.path > a.path) ? -1 : 0))\r\n\r\n        return result\r\n    }\r\n\r\n    const render_ = (node) => {\r\n        let result = tree(node)\r\n        let last = ''\r\n        let ind = 0\r\n        return result.map(d => {\r\n            let same = last == d.parent.path\r\n            last = d.parent.path\r\n            let value = d.value\r\n\r\n            // if ('' == value && typeof value == typeof 'abc') return <>{\r\n            //     same == true ?\r\n            //         <></>\r\n            //         :\r\n            //         <Divider  key={d.path+'_1'} style={{ marginTop: '10px' }} />\r\n            // }</>\r\n\r\n            let ignore = false\r\n            if (ignorePaths)\r\n                ignorePaths.map(exp => {\r\n                    if (d.path.replace(new RegExp(exp), '').replace(new RegExp('\\\\s+')) == '') {\r\n                        ignore = true\r\n                    }\r\n                })\r\n            if (ignore) return <div key={d.path+'_'+(++ind)}>{\r\n                same == true ?\r\n                    ''\r\n                    :\r\n                    <Divider  key={d.path+'_'+(++ind)} style={{ marginTop: '10px' }} />\r\n            }</div>\r\n\r\n            let is_address = false\r\n            if (addressFields)\r\n                addressFields.map(exp => {\r\n                    if (d.path.replace(new RegExp(exp), '').replace(new RegExp('\\\\s+')) == '') {\r\n                        is_address = true\r\n                    }\r\n                })\r\n\r\n            return (\r\n                <div key={d.path+'_'+(++ind)}>\r\n                    {\r\n                        same == true ?\r\n                            ''\r\n                            :\r\n                            <Divider  key={d.path+'_'+(++ind)} style={{ marginTop: '10px' }} />\r\n                    }\r\n\r\n                    <Grid key={d.path} container style={{ marginTop: '10px', display: 'flex' }}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel component=\"legend\" style={{ textAlign: \"left\", marginRight: '15px', color: '#aaaaaa' }}>{d.path}</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            {\r\n                                typeof value == typeof \"\" && (value.endsWith('.png') || value.endsWith('.jpg') || value.endsWith('.jpeg') || value.endsWith('.svg') || value.endsWith('.gif')) ?\r\n                                    <img src={value} width='20px' height='20px' />\r\n                                    :\r\n                                    typeof value == typeof \"\" && (value.startsWith('https://') || value.startsWith('http://')) ?\r\n                                        <Link href={value} target=\"blank\">{value}</Link>\r\n                                        :\r\n                                        typeof value == typeof true ?\r\n                                            <Grid item xs={10}>\r\n                                                <Controls.Checkbox value={value} onChange={a => { }} />\r\n                                            </Grid>\r\n                                            :\r\n                                            is_address ?\r\n                                                <Controls.CryptoAddress value={value} />\r\n                                                :\r\n                                                <Grid item xs={10}>\r\n                                                    <FormLabel component=\"legend\" style={{ color: '#bbbbbb' }}>{value}</FormLabel>\r\n                                                </Grid>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </div>)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{width:'100%'}}>\r\n            <Typography variant=\"h3\" gutterBottom component=\"div\" align=\"center\" style={{ fontWeight:'bold', marginTop:'20px', color: '#ccccff' }}>{title}</Typography>\r\n            <Divider component=\"div\" />\r\n            {\r\n                render_(entity)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\ap_services\\commonService.js",["547","548","549","550"],"import axios from 'axios';\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nexport function insert_rec(tableName, data) {\r\n    let all = getAll(tableName);\r\n    data['id'] = generateId(tableName)\r\n    all.push(data)\r\n    localStorage.setItem(tableName, JSON.stringify(all))\r\n}\r\n\r\nexport function update_rec(tableName, data) {\r\n    let all = getAll(tableName);\r\n    let recordIndex = all.findIndex(x => x.id == data.id);\r\n    all[recordIndex] = { ...data }\r\n    localStorage.setItem(tableName, JSON.stringify(all));\r\n}\r\n\r\nexport function delete_rec(tableName, id) {\r\n    let all = getAll(tableName);\r\n    all = all.filter(x => x.id != id);\r\n    localStorage.setItem(tableName, JSON.stringify(all));\r\n}\r\n\r\nexport function generateId(tableName) {\r\n    var key = tableName + '/id';\r\n    if (localStorage.getItem(key) == null)\r\n        localStorage.setItem(key, '0')\r\n    var id = parseInt(localStorage.getItem(key))\r\n    localStorage.setItem(key, (++id).toString())\r\n    return id;\r\n}\r\n\r\nconst MAX_ROWS = 200\r\nexport async function search(tableName, searchField, keywords, orderBy, endpoint, mock) {\r\n    if (mock) {\r\n        let all = getAll(tableName);\r\n\r\n        if (keywords != '') {\r\n            keywords = keywords.toLowerCase()\r\n            all = all.filter(x => x[searchField].toLowerCase().includes(keywords))\r\n        }\r\n\r\n        if (all.length > 0 && orderBy in all[0]) {\r\n            all.sort((a, b) => (a[orderBy] > b[orderBy]) ? 1 : ((b[orderBy] > a[orderBy]) ? -1 : 0))\r\n        }\r\n        return all\r\n    } else {\r\n        let body = { keywords: keywords }\r\n        let res = await axios.post('/api/metadata_token_read', body);\r\n        return res.data.data\r\n    }\r\n}\r\n\r\nexport async function query_by_id(tableName, id) {\r\n    let body = { id: id, index: tableName}\r\n    let res = await axios.post('/api/query_by_id', body);\r\n    console.log('query_by_id=', res.data.data)\r\n    return res.data.data\r\n}\r\n\r\nexport async function query_by_size(tableName, size) {\r\n    let body = { size: size, index: tableName}\r\n    let res = await axios.post('/api/metadata_query_by_size', body);\r\n    console.log('query_by_size=', res.data.data)\r\n    return res.data.data\r\n}\r\n\r\nexport async function update_doc(tableName, doc) {\r\n    let body = { doc: doc, index: tableName}\r\n    let res = await axios.post('/api/metadata_update', body);\r\n    // return res.data.data\r\n    console.log('res=', res)\r\n    return ''\r\n}\r\n\r\nexport async function insert_doc(tableName, doc) {\r\n    console.log('insert_doc====', doc);\r\n    doc['doc_id'] = uuidv4();\r\n    let body = { doc: doc, index: tableName}\r\n    let res = await axios.post('/api/metadata_insert', body);\r\n    console.log('res=', res)\r\n    return res.data;\r\n    // return []\r\n}\r\n\r\nexport async function delete_doc(tableName, doc) {\r\n    let body = { doc_id: doc.doc_id, index: tableName}\r\n    let res = await axios.post('/api/metadata_delete', body);\r\n    console.log('res=', res)\r\n    return res.data;\r\n}\r\n\r\nexport function getAll(tableName) {\r\n    if (localStorage.getItem(tableName) == null)\r\n        localStorage.setItem(tableName, JSON.stringify([]))\r\n    let all = JSON.parse(localStorage.getItem(tableName));\r\n    return all;\r\n}","D:\\mike\\solmates\\app_frontend\\src\\ap_services\\tokenServices.js",[],"D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\wallet_select_button\\index.jsx",["551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569"],"import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport config from '../../marsalgo/config/default.json';\r\nimport WalletSelector from '../wallet-selector';\r\n// import Button from \"components/button\";\r\nimport {\r\n    connect_to_wallet,\r\n    mint,\r\n    get_available_nfts_pass,\r\n    get_balance,\r\n    disconnect_wallet,\r\n    getAffiliatorWallet\r\n} from '../PhantomWallet';\r\n// import '../../css/main.css';\r\n\r\n\r\nexport default function SelectWalletButton(props) {\r\n    const { setProvider, setWalletType, setAddress, setBalance, setAvailable_nft } = props;\r\n    const [open2, setOpen2] = React.useState(false);\r\n    const [buttonLabel, setButtonLabel] = React.useState('CONNECT');\r\n\r\n    const connectWallet = async () => {\r\n        setButtonLabel('CONNECTING');\r\n\r\n        getAffiliatorWallet();\r\n        if (buttonLabel == 'CONNECT') {\r\n            setOpen2(true);\r\n        } else {\r\n            await disconnect_wallet();\r\n            setButtonLabel('CONNECT');\r\n        }\r\n    };\r\n\r\n    const wallet_callback = (address, provider) => {\r\n        (async () => {\r\n            if (!address) return;\r\n            setAddress(address);\r\n            await new Promise(r => setTimeout(r, 2000));\r\n            let rtn2 = await get_balance();\r\n            if (rtn2.ok) {\r\n                setBalance(rtn2.balance / 1000000000);\r\n                setProvider(provider)\r\n            } else {\r\n\r\n            }\r\n\r\n            // let rtn3 = await get_available_nfts_pass();\r\n            // setAvailable_nft(rtn3.left);\r\n\r\n            setButtonLabel('DISCONNECT');\r\n        })()\r\n    }\r\n\r\n    const on_wallet_selected = (wallet_type) => {\r\n        (\r\n            async () => {\r\n                try {\r\n                    setOpen2(false);\r\n\r\n                    // Canceled\r\n                    if (!wallet_type) return;\r\n                    setWalletType(wallet_type);\r\n                    let rtn = await connect_to_wallet(wallet_type, true, wallet_callback);\r\n\r\n                } catch (err) {\r\n\r\n                }\r\n            }\r\n        )()\r\n    }\r\n\r\n    return (\r\n        // style={{ marginTop: '13px', width: '270px' }}\r\n        <div >\r\n            {/* <Button\r\n                variant=\"blue\"\r\n                className=\"max-w-360 mx-auto\"\r\n                fluid\r\n                onClick={() => connectWallet()}\r\n            >\r\n                SELECT YOUR WALLET\r\n            </Button> */}\r\n            {/* <Button className=\"uppercase bg-black text-white py-3 text-10 px-3\"\r\n                onClick={() => connectWallet()}>\r\n                <span>Coming</span><br /><span className=\"sm:text-xs\">October 18</span>\r\n            </Button> */}\r\n            {/* <a href=\"#\" onClick={() => connectWallet()}>{buttonLabel}</a> */}\r\n            {/* <button className=\"button form-details-own-button\" onClick={() => connectWallet()}>{buttonLabel}</button> */}\r\n            <Button  variant=\"contained\" color=\"secondary\"   onClick={() => connectWallet()}>{buttonLabel}</Button>\r\n            <WalletSelector open={open2} onClose={on_wallet_selected} value={\"Phantom\"} />\r\n        </div>\r\n    );\r\n}","D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\PhantomWallet.js",["570","571","572","573","574","575","576","577","578","579","580"],"import {\r\n    Connection,\r\n    PublicKey,\r\n    Transaction,\r\n    clusterApiUrl,\r\n    SystemProgram\r\n} from \"@solana/web3.js\";\r\nimport axios from 'axios';\r\nimport config from './config/default.json';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\n\r\n/**\r\n * These two are reused to save time\r\n */\r\nvar provider, connection;\r\n\r\nexport const WALLET_CONN_STATE_no_extension = \"no extension\";\r\nexport const WALLET_CONN_STATE_no_wallet_imported = \"no wallet_imported\";\r\nexport const WALLET_CONN_STATE_ok = \"ok\";\r\nexport const WALLET_CONN_STATE_canceled = \"canceled\";\r\nexport const WALLET_CONN_STATE_disconnected = \"disconnected\";\r\nexport const WALLET_CONN_STATE_not_selected = \"wallet not selected\";\r\nexport const WALLET_CONN_STATE_sys_error= \"system error\";\r\n\r\nexport const WALLET_TYPE_Phantom = \"Phantom\";\r\nexport const WALLET_TYPE_Solflare = \"Solflare\";\r\nexport const WALLET_TYPE_Sollet_web = \"Sollet Web\";\r\nexport const WALLET_TYPE_Sollet_extension = \"Sollet Extension\";\r\n\r\nexport const MINT_STATE_ok = \"ok\";\r\nexport const MINT_STATE_sold_out = \"sold out\";\r\nexport const MINT_STATE_sys_error = \"sys error\";\r\nexport const MINT_STATE_canceled = \"canceled\";\r\nexport const MINT_STATE_insufficient_balance = \"insufficient_balance\";\r\nexport const MINT_STATE_nft_not_enough = \"not enough NFT\";\r\n\r\nexport const DIALOG_STYLE_TITLE = { backgroundColor: '#1c1d20', color:'#fafafa', textAlign:'center', fontSize:'22px' };\r\nexport const DIALOG_STYLE_CONTENT = { backgroundColor: '#2c2d30', color:'#fafafa' };\r\n\r\nexport const WHITELIST_STATE_NOT_IN_LIST=\"NOT IN LIST\";\r\nexport const WHITELIST_STATE_OK=\"OK\";\r\nexport const WHITELIST_STATE_EXCEEDING_LIMIT=\"EXCEEDING_LIMIT\";\r\nexport const WHITELIST_STATE_SYSTEM_ERROR=\"SYSTEM_ERROR\";\r\n\r\n/**\r\n * Connect to Solana network\r\n */\r\n const connectNetwork=()=>{\r\n    connection = new Connection(\r\n        clusterApiUrl(config.NETWORK),\r\n        'finalized',\r\n    );\r\n}\r\n\r\n/**\r\n * Get a buyer wallet's balance\r\n * @returns \r\n */\r\nexport const get_balance = async ()=>{\r\n    if(!connection){\r\n        connectNetwork();\r\n    }\r\n    if(!provider || !provider.publicKey || !connection){\r\n        return {ok:false}\r\n    }else{\r\n        let balance = await connection.getBalance(provider.publicKey, 'finalized');\r\n        return {ok:true, balance:balance}\r\n    }\r\n}\r\n\r\n/**\r\n * Get the buyer wallet's current active address\r\n * @returns \r\n */\r\nexport const get_current_address = async ()=>{\r\n    if(!provider || !provider.publicKey || !connection){\r\n        return {ok:false}\r\n    }else{\r\n        let balance = await connection.getBalance(provider.publicKey, 'finalized');\r\n        return {ok:true, address:provider.publicKey+\"\"}\r\n    }\r\n}\r\n\r\n/**\r\n * Determine how many NFTs are available for sale, it's only a reference number, because\r\n * there might be multiples buyers online at the same time.\r\n * @returns { left: left }\r\n */\r\n export const get_available_nfts = async ()=>{\r\n    let res = await axios.post(config.backend_endpoint_base+`availableNFTs`,{});\r\n    return res.data;\r\n}\r\n\r\nexport const get_available_nfts_pass = async (quantityHero, quantityVillain, wallet)=>{\r\n    let res = await axios.post(config.backend_endpoint_base+`availableNFTs_pass`,{quantityHero: quantityHero, quantityVillain: quantityVillain, wallet: wallet});\r\n    return res.data;\r\n}\r\n\r\nexport const mckenna_set_stage = async (stage)=>{\r\n    let res = await axios.post(config.backend_endpoint_base+`mckenna_set_stage`,{stage: stage});\r\n    return res.data;\r\n}\r\n\r\nexport const mint_pass = async (quantityHero, quantityVillain) => {\r\n    if(!connection){\r\n        connectNetwork();\r\n    }\r\n    try{\r\n        // 3. Call the back end to mint\r\n        let body={\r\n            quantityHero: quantityHero,\r\n            quantityVillain: quantityVillain\r\n        };\r\n        let rtn = await axios.post(config.backend_endpoint_base+`mint_pass`,body);\r\n        console.log(\"mint rtn==========\"+JSON.stringify(rtn.data));\r\n        return rtn.data;\r\n    }catch(e1){\r\n        console.log(\"e1==========\"+e1);\r\n        return {state: MINT_STATE_sys_error};\r\n    }\r\n}\r\n\r\n/**\r\n * This will mit NFTs, but not transfered to the buyer.\r\n * This should be used in combination with the function 'transaction_all_in_one'\r\n * as one process of handling the event of clicking on the 'Mint' button on the GUI\r\n * as used in src/marsalog/buy_board/index.js. These minted NFTs can't be sold to others,\r\n * they are locked up.\r\n * @param {*} quantity, number of NFTs to mint\r\n * @returns An object with two properties {state, tokens}, 'tokens' is an array of objects with properties: tokenAddres, tokenAccountAddress, index, rarity\r\n */\r\nexport const mint = async (quantity) => {\r\n    if(!connection){\r\n        connectNetwork();\r\n    }\r\n    try{\r\n        // 3. Call the back end to mint\r\n        let body={\r\n            quantity: quantity\r\n        };\r\n        let rtn = await axios.post(config.backend_endpoint_base+`mint3`,body);\r\n        console.log(\"mint rtn==========\"+JSON.stringify(rtn.data));\r\n        return rtn.data;\r\n    }catch(e1){\r\n        console.log(\"e1==========\"+e1);\r\n        return {state: MINT_STATE_sys_error};\r\n    }\r\n}\r\n\r\nconst FINAL_PRICE_STATE_ok=\"ok\";\r\nconst FINAL_PRICE_STATE_sys_err=\"sys err\";\r\nconst func_final_price = async(buyerWalletAddress, index, stage)=>{\r\n    let body={\r\n        buyerWalletAddress: buyerWalletAddress, \r\n        index: index,\r\n        stage: stage\r\n    };\r\n    let rtn = await axios.post(config.backend_endpoint_base+`final_price_mckenna`,body);\r\n    console.log(\"final_price===\", JSON.stringify(rtn.data));\r\n    console.log(\"final_price===\", rtn.data.final_price);\r\n    console.log(\"final_price===\", rtn.data[\"final_price\"]);\r\n    return rtn.data.final_price;\r\n}\r\n\r\nexport const getAffiliatorWallet=()=>{\r\n    let affiliatorWallet = undefined;\r\n    const pathname = window.location.href ;\r\n    const sa1 = pathname.split(\"#\");\r\n    for(var i=0; i<sa1.length; i++){\r\n        const sa2 = sa1[i].split(\"=\");\r\n        if(sa2[0]==KEY_AFFILIATE){\r\n            affiliatorWallet=sa2[1];\r\n            break;\r\n        }\r\n    }\r\n    console.log(\"affiliatorWallet===\", affiliatorWallet);\r\n    return affiliatorWallet;\r\n}\r\n\r\n/**\r\n * This will really execute the whole transaction, trasfering SOLs and NFTs.\r\n * @param {*} buyerWallet , the buyer's wallet\r\n * @param {*} quantity , the nubmer of NFTs the buyer wants to buy\r\n * @param {*} price , unit price of NFT\r\n * @param {*} tokens , an array of tokens that have been minted but not transfered\r\n * @returns \r\n */\r\nconst KEY_AFFILIATE = \"affiliate_wallet\";\r\nexport const transaction_all_in_one_mckenna=async(buyerWallet, quantity, price, tokens, stage)=>{\r\n    // 0. Get affiliate address\r\n    let affiliatorWallet = getAffiliatorWallet();\r\n    console.log(\"tokens[0].=================\",JSON.stringify(tokens[0]));\r\n    let var_final_price=await func_final_price(buyerWallet, tokens[0].index, stage);\r\n    let total_amount= var_final_price * quantity;\r\n    console.log(\"final_price=x==\", var_final_price);\r\n    console.log(\"quantity=x==\", quantity);\r\n\r\n    const transaction = await createTransferTransaction(total_amount);\r\n    let signed = null;\r\n    try{\r\n        // 2. Ask for the buyer's approval\r\n        signed = await provider.signTransaction(transaction);\r\n        if(!signed){\r\n            return {state: MINT_STATE_canceled};\r\n        }\r\n\r\n        // 3. Call the back end to execute the whole transaction \r\n        let body={\r\n            buyerWalletAddress: buyerWallet, \r\n            total_amount: total_amount,\r\n            signedObj: signed.serialize(),\r\n            tokens: tokens,\r\n            affiliatorWallet: affiliatorWallet,\r\n            stage: stage\r\n        };\r\n        console.log(\"total_amount==========\"+total_amount);\r\n        let rtn = await axios.post(config.backend_endpoint_base+`transaction_all_in_one_mckenna`,body);\r\n        return rtn.data;\r\n    }catch(e1){\r\n        console.log(\"e1==========\"+e1);\r\n        return {state: MINT_STATE_canceled};\r\n    }\r\n}\r\n\r\nexport const count_minted = async () => {\r\n    let rtn = await axios.post(config.backend_endpoint_base+`count_minted`,{});\r\n    return rtn.data;\r\n}\r\n\r\nexport const disconnect_wallet = async () => {\r\n    if(provider && provider.isConnected){\r\n        provider.disconnect();\r\n        provider = undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Connect buyers' wallet\r\n *    wallet_type: wallet type, one of the values of WALLET_TYPE_*\r\n *  from_selector: indicate if this func is called from the Wallet Selector\r\n * wallet_callbck: a function that is called after a wallet is selected or minting is finished to \r\n *                 refresh the number of available NFTs and the buyer wallet balance\r\n */\r\nexport const connect_to_wallet = async (wallet_type, from_selector, wallet_callback) => {\r\n    if(!wallet_type){\r\n        if(from_selector){\r\n            return {state: WALLET_CONN_STATE_canceled};\r\n        }else{\r\n            return {state: WALLET_CONN_STATE_not_selected};\r\n        }\r\n    }\r\n    let tmp = undefined;\r\n    if(wallet_type == WALLET_TYPE_Phantom && window.solana && window.solana.isPhantom){\r\n        tmp = window.solana;\r\n    }else if (wallet_type == WALLET_TYPE_Solflare && window.solflare && window.solflare.isSolflare){\r\n        let providerUrl = 'https://solflare.com/provider';\r\n        tmp = new Wallet(providerUrl);\r\n    }else if (wallet_type == WALLET_TYPE_Sollet_web && window.sollet){\r\n        let providerUrl = 'https://www.sollet.io';\r\n        tmp = new Wallet(providerUrl);\r\n    }else if (wallet_type == WALLET_TYPE_Sollet_extension && window.sollet){\r\n        let providerUrl = window.sollet;\r\n        tmp = new Wallet(providerUrl);\r\n    }else{\r\n        return {\r\n            state: WALLET_CONN_STATE_no_extension\r\n        }\r\n    }\r\n\r\n    tmp.on(\"connect\", (d, g) => {\r\n        provider = tmp;\r\n        console.log(provider.publicKey+\"============connected\");\r\n        wallet_callback(provider.publicKey+\"\", provider);\r\n    });\r\n    tmp.on(\"disconnect\", (d, g) => {\r\n        console.log(\"=============disconnected\");\r\n        return {\r\n            state: WALLET_CONN_STATE_disconnected\r\n        }\r\n    });\r\n\r\n    try{\r\n        await tmp.connect();\r\n    }catch(err){\r\n        return {state:WALLET_CONN_STATE_sys_error}\r\n    }\r\n\r\n    await new Promise(r=>setTimeout(r, 3000));\r\n\r\n    if(tmp.isConnected){\r\n        provider = tmp;\r\n    }\r\n    if(tmp && provider && provider.publicKey){\r\n        return {\r\n            state: WALLET_CONN_STATE_ok,\r\n            address: provider.publicKey+\"\"\r\n        };\r\n    }else{\r\n        return {\r\n            state: WALLET_CONN_STATE_no_wallet_imported\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Create a transaction for transfering SOL from the buyer to the website owner\r\n * @param {*} sol \r\n * @returns \r\n */\r\nconst createTransferTransaction = async (sol) => {\r\n    if (!provider || !provider.publicKey) {\r\n        connect_to_wallet();\r\n        await new Promise(r => setTimeout(r, 3000));\r\n    }\r\n\r\n    if(!connection){\r\n        connectNetwork();\r\n    }\r\n\r\n    const myPubKey = new PublicKey(config.MY_PUBLIC_KEY);\r\n    let transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n            fromPubkey: provider.publicKey,\r\n            toPubkey: myPubKey,\r\n            lamports: sol*1000000000\r\n        })\r\n    );\r\n    transaction.feePayer = provider.publicKey;\r\n    transaction.recentBlockhash = (\r\n        await connection.getRecentBlockhash()\r\n    ).blockhash;\r\n    return transaction;\r\n};\r\n\r\n/**\r\n * It's possible that a buyer pressed the 'Cancel' button in Phantom, in such a case\r\n * so we have to release the NFTs that have been locked up so as to be ready for sale again.\r\n * @param {*} tokens , the NFTs that have been minted\r\n * @returns \r\n */\r\nexport const compensate = async (tokens) => {\r\n    let body = {\r\n        tokens:tokens\r\n    }\r\n    let res = await axios.post(config.backend_endpoint_base+`compensate_mckenna`,body);\r\n    return {state: MINT_STATE_canceled};\r\n}\r\n\r\nexport const mckenna_get_stage = async () =>{\r\n    let res = await axios.post(config.backend_endpoint_base+`mckenna_get_stage`,{});\r\n    console.log(\"mckenna_get_stage===\", JSON.stringify(res.data));\r\n    return res.data;\r\n}\r\n\r\n/**\r\n * Determine if a wallet is in whitelist and if the quantity is exceeding the limit\r\n * @param {*} address , the buyer's wallet address\r\n * @param {*} quantity , the quantity of NFTs the buyer wants to buy\r\n * @returns {state: WHITELIST_STATE_*}\r\n */\r\nexport const is_in_whitelist = async (address, quantity) =>{\r\n    let body = {\r\n        address:address,\r\n        quantity:quantity\r\n    }\r\n    console.log(\"check is_in_whitelist, address=\"+address+\", quantity=\"+quantity);\r\n    let res = await axios.post(config.backend_endpoint_base+`is_in_whitelist`,body);\r\n    console.log(\"check is_in_whitelist, return=\"+res.data);\r\n    return res.data;\r\n}\r\n\r\nconst STATE_UPDATE_METADATA_OK=\"OK\";\r\nconst STATE_UPDATE_METADATA_SYSTEM_ERROR=\"SYSTEM_ERROR\";\r\n/**\r\n * \r\n * @param {*} name , new name of the NFT to be updated\r\n * @param {*} address , the address of the NFT to be updated\r\n * @param {*} uri  , the metadata JSON URI of the NFT to be updated\r\n * @returns {state: STATE_UPDATE_METADATA_*}\r\n */\r\nexport const update_metadata = async (name, address, uri) => {\r\n    let body = {\r\n        name: name,\r\n        address:address,\r\n        uri:uri\r\n    }\r\n    let res = await axios.post(config.backend_endpoint_base+`update_metadata`,body);\r\n    return res.data;\r\n}","D:\\mike\\solmates\\app_frontend\\src\\marsalgo\\wallet-selector\\index.js",["581","582","583","584","585","586","587","588","589","590","591"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n//MarsAlgo\r\nimport IconSolletExtension from '../image/sollet_extension.png';\r\nimport IconSolletWeb from '../image/sollet_web.svg';\r\nimport IconPhantom from '../image/phantom.svg';\r\nimport IconSolflare from '../image/solflare.svg';\r\nimport {\r\n  WALLET_TYPE_Phantom,\r\n  WALLET_TYPE_Solflare,\r\n  WALLET_TYPE_Sollet_extension,\r\n  WALLET_TYPE_Sollet_web,\r\n  DIALOG_STYLE_CONTENT,\r\n  DIALOG_STYLE_TITLE\r\n} from '../PhantomWallet';\r\n\r\n\r\nconst options = [\r\n  WALLET_TYPE_Phantom,\r\n  WALLET_TYPE_Solflare,\r\n  WALLET_TYPE_Sollet_extension,\r\n  WALLET_TYPE_Sollet_web\r\n];\r\n\r\nexport default function ConfirmationDialogRaw(props) {\r\n  const { onClose, value: valueProp, open, ...other } = props;\r\n  const [value, setValue] = React.useState(valueProp);\r\n  const radioGroupRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      setValue(valueProp);\r\n    }\r\n  }, [valueProp, open]);\r\n\r\n  const handleEntering = () => {\r\n    if (radioGroupRef.current != null) {\r\n      radioGroupRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const handleOk = () => {\r\n    onClose(value);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\r\n      maxWidth=\"xs\"\r\n      TransitionProps={{ onEntering: handleEntering }}\r\n      open={open}\r\n      {...other}\r\n    >\r\n      <DialogTitle style={DIALOG_STYLE_TITLE}>SELECT WALLET</DialogTitle>\r\n      <DialogContent dividers style={DIALOG_STYLE_CONTENT}>\r\n        <RadioGroup\r\n          ref={radioGroupRef}\r\n          aria-label=\"ringtone\"\r\n          name=\"ringtone\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          {options.map((option) => (\r\n            <div key={option} style={{ display: 'flex', verticalAlign: 'text-top', alignItems: 'center' }}>\r\n              {\r\n                option == WALLET_TYPE_Sollet_extension ?\r\n                  <img src={IconSolletExtension} style={{ width: '30px', height: '30px', marginRight: '30px' }} />\r\n                  : option == WALLET_TYPE_Sollet_web ?\r\n                    <img src={IconSolletWeb} style={{ width: '30px', height: '30px', marginRight: '30px' }} />\r\n                    : option == WALLET_TYPE_Phantom ?\r\n                      <img src={IconPhantom} style={{ width: '30px', height: '30px', marginRight: '30px' }} />\r\n                      : <img src={IconSolflare} style={{ width: '30px', height: '30px', marginRight: '30px' }} />\r\n              }\r\n              <FormControlLabel\r\n                value={option}\r\n                key={option}\r\n                control={<Radio />}\r\n                label={option}\r\n              />\r\n            </div>\r\n          ))}\r\n        </RadioGroup>\r\n      </DialogContent>\r\n      <DialogActions style={DIALOG_STYLE_TITLE}>\r\n        <Button autoFocus onClick={handleCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleOk}>Ok</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nConfirmationDialogRaw.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\n// export default function ConfirmationDialog(props) {\r\n//     const { open2 } = props;\r\n//   const [open, setOpen] = React.useState(open2);\r\n//   const [value, setValue] = React.useState('Dione');\r\n\r\n//   const handleClickListItem = () => {\r\n//     setOpen(true);\r\n//   };\r\n\r\n//   const handleClose = (newValue) => {\r\n//     setOpen(false);\r\n\r\n//     if (newValue) {\r\n//       setValue(newValue);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\r\n//       <List component=\"div\" role=\"group\">\r\n//         <ListItem button divider disabled>\r\n//           <ListItemText primary=\"Interruptions\" />\r\n//         </ListItem>\r\n//         <ListItem\r\n//           button\r\n//           divider\r\n//           aria-haspopup=\"true\"\r\n//           aria-controls=\"ringtone-menu\"\r\n//           aria-label=\"phone ringtone\"\r\n//           onClick={handleClickListItem}\r\n//         >\r\n//           <ListItemText primary=\"Phone ringtone\" secondary={value} />\r\n//         </ListItem>\r\n//         <ListItem button divider disabled>\r\n//           <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" />\r\n//         </ListItem>\r\n//         <ConfirmationDialogRaw\r\n//           id=\"ringtone-menu\"\r\n//           keepMounted\r\n//           open={open}\r\n//           onClose={handleClose}\r\n//           value={value}\r\n//         />\r\n//       </List>\r\n//     </Box>\r\n//   );\r\n// }\r\n","D:\\mike\\solmates\\app_frontend\\src\\components\\theme.js",[],"D:\\mike\\solmates\\app_frontend\\src\\solmate\\config.js",[],["592","593"],"D:\\mike\\solmates\\app_frontend\\src\\solmate\\stake.js",["594","595","596","597","598","599","600","601"],"import { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n// import splToken from '@solana/spl-token';\r\n// import { CONFIG_ACCOUNT_DATA_LAYOUT } from \"./layout\";\r\n// import encoder from './solmate_tools';\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport config from './config';\r\nimport generated from './generated';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport host from './host_wallet.json';\r\n\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nconsole.log('===========', generated);\r\n\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\n\r\nconst STATE_canceled = 'STATE_canceled'\r\n\r\nexport const stake = async (staker_wallet, time_length, nfts = [], provider, max_nft_to_stake) => {\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n\r\n    // 0. Create a per wallet account if necessary, it's used to get staking info per wallet\r\n    const PDA_per_wallet = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_wallet,\r\n        stake_program_pubkey)\r\n    let per_wallet_data = null\r\n    try {\r\n        per_wallet_data = (await connection.getAccountInfo(PDA_per_wallet, 'confirmed')).data\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    if (!per_wallet_data) {\r\n        console.log('aaaaaaaaaaaaa')\r\n        ixs.push(SystemProgram.createAccountWithSeed({\r\n            fromPubkey: staker_wallet_pubkey,\r\n            newAccountPubkey: PDA_per_wallet,\r\n            basePubkey: staker_wallet_pubkey,\r\n            seed: config.seed_wallet,\r\n            lamports: await connection.getMinimumBalanceForRentExemption(max_nft_to_stake*250, 'singleGossip'),\r\n            space: max_nft_to_stake*250,\r\n            programId: stake_program_pubkey\r\n        }))\r\n    }\r\n\r\n    // 1. Transfer staker's NFT to Stake Program\r\n    let escrowed_pubkeys = [];\r\n    for (var i = 0; i < nfts.length; i++) {\r\n        const to = await Token.getAssociatedTokenAddress(\r\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n            TOKEN_PROGRAM_ID,\r\n            new PublicKey(nfts[i].mint),\r\n            host_pubkey\r\n        );\r\n        escrowed_pubkeys.push(to);\r\n        console.log('to==', to.toString() + '')\r\n        // ixs.push(web3.SystemProgram.transfer({\r\n        //     fromPubkey: new PublicKey(nfts[i].account),\r\n        //     toPubkey: to,\r\n        //     lamports: web3.LAMPORTS_PER_SOL / 100,\r\n        // }));\r\n\r\n        /**\r\n         *       programId: PublicKey,\r\n      source: PublicKey,\r\n      destination: PublicKey,\r\n      owner: PublicKey,\r\n      multiSigners: Array<Signer>,\r\n      amount: number | u64,\r\n         */\r\n        ixs.push(Token.createTransferInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            new PublicKey(nfts[i].account),\r\n            to,\r\n            staker_wallet_pubkey,\r\n            [],\r\n            1,\r\n        ));\r\n        console.log('xxxxxxxxxxxxxxxxxxxx')\r\n    }\r\n\r\n    // 2. Call Stake Program\r\n\r\n    const PDA_stake = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_stake,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey);\r\n\r\n        // let acc_init = next_account_info(account_iter)?;\r\n        // let acc_wallet = next_account_info(account_iter)?;\r\n        // let acc_token_prog = next_account_info(account_iter)?;\r\n        // let acc_sys_prog = next_account_info(account_iter)?;\r\n        // let acc_rent = next_account_info(account_iter)?;\r\n        // let acc_stake_state = next_account_info(account_iter)?;\r\n        // let acc_per_wallet = next_account_info(account_iter)?;\r\n        // let acc_config = next_account_info(account_iter)?;\r\n\r\n    let data = Uint8Array.of(0,\r\n        ...new BN(time_length).toArray(\"le\", 2));\r\n    console.log('data===', data);\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: staker_wallet_pubkey, isSigner: true, isWritable: false },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n        { pubkey: PDA_stake, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_per_wallet, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n        \r\n        // { pubkey: config_pubkey, isSigner: false, isWritable: false },\r\n        // { pubkey: ciety_mint_pubkey, isSigner: false, isWritable: false },\r\n        // { pubkey: ciety_account_pubkey, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    for (var i = 0; i < escrowed_pubkeys.length; i++) {\r\n        let pubkey = escrowed_pubkeys[i];\r\n        keys.push({ pubkey: pubkey, isSigner: false, isWritable: false })\r\n\r\n        const PDA = await PublicKey.findProgramAddress([Buffer.from(\"ciety_reward\"), pubkey.toBuffer()], stake_program_pubkey);\r\n        keys.push({ pubkey: PDA[0], isSigner: false, isWritable: false })\r\n        keys.push({ pubkey: nfts[i]['mintAuthority'], isSigner: false, isWritable: false })\r\n        console.log('acc_nft==', pubkey.toString());\r\n        console.log('acc_pda==', PDA[0].toString());\r\n    }\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = host_pubkey;\r\n    tx.recentBlockhash = (\r\n        await connection.getRecentBlockhash()\r\n    ).blockhash;\r\n\r\n\r\n    // const serialized_msg = tx.serializeMessage();\r\n    // const response = (await provider.sendRequest('signTransaction', {\r\n    //     message: bs58.encode(serialized_msg),\r\n    // }));\r\n    // const signature = bs58.decode(response.signature);\r\n    // const publicKey = new PublicKey(response.publicKey);\r\n\r\n\r\n    // const secretKey = Buffer.from(host)\r\n    // const hostAccount = Keypair.fromSecretKey(secretKey)\r\n    // console.log('111==', tx.signatures)\r\n    // tx.sign(hostAccount)\r\n    // tx.signatures.map(a=>{\r\n    //     console.log(\"eeeeee===\", a.publicKey+'')\r\n    // })\r\n    // console.log('222==', tx.signatures)\r\n    let signed = await provider.signTransaction(tx);\r\n    console.log('333==', signed.signatures)\r\n    signed.signatures.map(a => {\r\n        console.log(\"ffffffff===\", a.publicKey + '')\r\n    })\r\n    if (!signed) {\r\n        return { state: STATE_canceled };\r\n    }\r\n    // signed.setSigners([host_pubkey, staker_wallet_pubkey])\r\n\r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n    let rtn = await axios.post('/api/stake', body);\r\n    // console.log('signed.signatures==', signed.signatures)\r\n\r\n    // let signature = await connection.sendRawTransaction(signed.serialize());\r\n    // await connection.confirmTransaction(signature);\r\n    // return { state: 'STAKE_ERR' }\r\n\r\n\r\n    return rtn.data;\r\n\r\n}",["602","603"],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Stake.js",["604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport * as SolmateList from '../../solmate/list';\r\nimport {stake} from '../../solmate/stake';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function Stake() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState(<></>)\r\n    const [selects, setSelects] = useState([])\r\n    const [timeLength, setTimeLength] = useState(7)\r\n    const [provider, setProvider] = useState(null)\r\n    const [max_nft_to_stake, setMax_nft_to_stake] = useState(2);\r\n\r\n    const onList = () => {\r\n\r\n    }\r\n    const onStake = async () => {\r\n        let nfts = []\r\n        records.map(rec=>{\r\n            if(rec.selected) nfts.push(rec)\r\n        })\r\n        if(nfts.length==0)return\r\n        let rtn = await stake(address,timeLength ,nfts, provider, max_nft_to_stake)\r\n\r\n        console.log('stake result: ', rtn)\r\n    }\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const onChange = (a, ind) => {\r\n        records[ind].selected = !(records[ind].selected)\r\n        // a.target.value = rec.selected\r\n        // a.target.checked = rec.selected\r\n        console.log('xxxxxxxxxxxxxxxxxxxxxxxx   ', records[ind].selected)\r\n        // console.log('xxxxxxxxxxxxxxxxxxxxxxxx   ', a.target.value)\r\n        selects[ind] = !selects[ind]\r\n        setSelects(selects)\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n        let nfts = await SolmateList.list(wallet)\r\n        setRecords(nfts)\r\n        let x = nfts.map(n => n.selected)\r\n        setSelects(x)\r\n    }\r\n\r\n    const x = () => {\r\n        let y = records.map((r, ind) => {\r\n            return <Grid key={ind} item xs={12}>\r\n                <Card sx={{ minWidth: 500 }} style={{ marginLeft: '30px', marginTop: '30px' }}>\r\n                    <CardContent>\r\n                        <Typography style={{ color: '#aaaaaa' }} gutterBottom>\r\n                            Account: {r.account}\r\n                        </Typography>\r\n                        <Typography style={{ color: '#aaaaaa' }} >\r\n                            Mint: {r.mint}\r\n                        </Typography>\r\n                        <img src={r.metadata.image} width='100px' height='100px'/>\r\n                        <Checkbox\r\n                            checked={selects[ind]}\r\n                            onChange={a => onChange(a, ind)}\r\n                        />\r\n                        <Controls.AutoInfo title={'INFO'} entity={r}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        })\r\n\r\n        setContent(y)\r\n    }\r\n\r\n    useEffect(a => {\r\n        x()\r\n    }, [records])\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => onStake()}>Stake</Button>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Controls.Input\r\n                        name=\"symbol\"\r\n                        label=\"Time Length(days)\"\r\n                        value={timeLength}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Controls.Input\r\n                        name=\"max_nft_to_stake\"\r\n                        label=\"Max NFTs to Stake)\"\r\n                        value={max_nft_to_stake}\r\n                        helperText=\"It only takes effect at the first time\"\r\n                    />\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n\r\n            <Grid container>{content}</Grid>\r\n        </>\r\n    )\r\n}\r\n",["631","632"],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Game.js",["633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport {v2_get_stake_info} from '../../solmate/v2_get_stake_info';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function Game() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState([])\r\n    const [provider, setProvider] = useState(null)\r\n\r\n    const onList = () => {\r\n\r\n    }\r\n    const onGetStakeInfo = async () => {\r\n        let rtn = await v2_get_stake_info(address)\r\n        setContent(rtn)\r\n    }\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => onGetStakeInfo()}>Get Stake Info</Button>\r\n                </Grid>                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n\r\n            <Controls.AutoInfo title={'INFO'} entity={content} />\r\n        </>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\get_stake_info.js",["661","662","663","664","665","666","667","668","669","670","671"],"\r\nimport config from './config';\r\nimport BufferLayout from \"buffer-layout\";\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { STAKED_DATA_LAYOUT } from './layout';\r\nimport BN from 'bn.js';\r\n/**\r\n * Layout for a public key\r\n */\r\nconst publicKey = (property = \"publicKey\") => {\r\n    return BufferLayout.blob(32, property);\r\n};\r\n\r\n/**\r\n * Layout for a 64bit unsigned value\r\n */\r\nconst uint64 = (property = \"uint64\") => {\r\n    return BufferLayout.blob(8, property);\r\n};\r\n\r\nconst LAYOUT = BufferLayout.struct([\r\n    BufferLayout.u8(\"is_initialized\"),\r\n    BufferLayout.u16('len'),\r\n    BufferLayout.u16('stake_max_days'),\r\n    BufferLayout.u16('emission_total_days'),\r\n    BufferLayout.u8(\"ciety_decimals\"),\r\n    BufferLayout.u32('start_emission'),\r\n    BufferLayout.blob(8, 'init_timestamp'),\r\n    BufferLayout.u32('decay_frequency_seconds'),\r\n]);\r\n\r\n\r\n\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\n\r\n/**\r\n * Get stake info from the account derived from a given staker's wallet, the fee is paid by the staker\r\n * @param {*} staker_wallet \r\n * @returns \r\n */\r\nexport const get_stake_info = async (staker_wallet) => {\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n\r\n    // 0. Create a per wallet account if necessary, it's used to get staking info per wallet\r\n    const PDA_per_wallet = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_wallet,\r\n        stake_program_pubkey)\r\n\r\n    console.log('PDA_per_wallet===', PDA_per_wallet.toString())\r\n    let per_wallet_data = null\r\n    try {\r\n        per_wallet_data = (await connection.getAccountInfo(PDA_per_wallet, 'confirmed')).data\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    if (per_wallet_data) {\r\n        console.log('per_wallet_data===', per_wallet_data)\r\n        console.log('per_wallet_data  per_wallet_data.slice(1, 3)===', per_wallet_data.slice(1, 3))\r\n        let dv = new DataView(per_wallet_data.buffer, 1, 2);\r\n        let uint = dv.getUint16(0, /* little endian data */ true);\r\n        console.log('per_wallet_data  uint===', uint)\r\n\r\n        let rtn = [];\r\n        let ind = 3;\r\n        for (var i = 0; i < uint; i++) {\r\n            /**\r\n             * \r\n    pub nft_account: Pubkey,\r\n    pub pda: Pubkey,\r\n    pub start_timestamp: i64,\r\n    pub time_length_day: u16,\r\n    pub accumulated_ciety: f32,\r\n    pub start_slot: u32,\r\n    pub end_slot: u32,\r\n\r\n    new BN(decodedConfigAccountState.init_timestamp, 10, \"le\").toNumber()\r\n            */\r\n            let slice = per_wallet_data.slice(ind, ind + 86);\r\n            console.log(\"xxxxxxxxxxxxxxx\", slice);\r\n            const decoded_staked = STAKED_DATA_LAYOUT.decode(slice);\r\n            console.log('decoded_staked===========', decoded_staked);\r\n            // console.log('decoded_staked.time_length_day.buffer===========', decoded_staked.time_length_day.buffer);\r\n            // let dv_start_timestamp = new DataView(decoded_staked.start_timestamp.buffer);\r\n            // let dv_time_length_day = new DataView(decoded_staked.time_length_day.buffer);\r\n            // let dv_accumulated_ciety = new DataView(decoded_staked.accumulated_ciety.buffer);\r\n            // let dv_start_slot = new DataView(decoded_staked.start_slot.buffer);\r\n            // let dv_end_slot = new DataView(decoded_staked.end_slot.buffer);\r\n            let nft = {\r\n                nft_account: new PublicKey(decoded_staked.nft_account).toBase58(),\r\n                pda: new PublicKey(decoded_staked.pda).toBase58(),\r\n                start_timestamp: decoded_staked.start_timestamp,\r\n                time_length_day: decoded_staked.time_length_day,\r\n                accumulated_ciety: decoded_staked.accumulated_ciety/(10^9),\r\n                start_slot: decoded_staked.start_slot,\r\n                end_slot: decoded_staked.end_slot,\r\n            };\r\n            rtn.push(nft);\r\n            console.log('nft===========', nft);\r\n            ind += 86;\r\n        }\r\n        return rtn;\r\n    }\r\n\r\n    return [];\r\n\r\n}","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Reward.js",["672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport * as SolmateList from '../../solmate/list';\r\nimport {stake} from '../../solmate/stake';\r\nimport {calc_reward} from '../../solmate/reward';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function Reward() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState(null)\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState(<></>)\r\n    const [selects, setSelects] = useState([])\r\n    const [timeLength, setTimeLength] = useState(7)\r\n    const [provider, setProvider] = useState(null)\r\n    const [max_nft_to_stake, setMax_nft_to_stake] = useState(2);\r\n    const [rewardAmount, setRewardAmount] = useState(0)\r\n\r\n\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n    }\r\n\r\n    const onClick = async () => {\r\n        console.log('address===', address)\r\n        console.log('provider===', provider)\r\n        let ciety = await calc_reward(address, provider)\r\n        setRewardAmount(ciety)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" onClick={onClick} >Resolve Reward</Button>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Rewarded $CIETY:   {rewardAmount}\r\n            </Typography>\r\n\r\n            <Grid container>{content}</Grid>\r\n        </>\r\n    )\r\n}\r\n",["708","709"],"D:\\mike\\solmates\\app_frontend\\src\\solmate\\reward.js",["710","711","712","713","714","715","716","717","718","719","720","721"],"import { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport config from './config';\r\nimport generated from './generated';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport host from './host_wallet.json';\r\nimport * as splToken from '@solana/spl-token';\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\n\r\nimport { get_stake_info } from './get_stake_info';\r\n\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\nconst STATE_canceled = 'STATE_canceled'\r\n\r\n/**\r\n * Call 'Stake Smart Contract' to calculate his total reward of $CIETY, the contract will store rewards of all NFTs into\r\n * the staker's account\r\n * @param {*} staker_wallet \r\n * @param {*} provider \r\n * @returns \r\n */\r\nconst reward = async (staker_wallet, provider) => {\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n\r\n    const PDA_per_wallet = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_wallet,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_stake = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_stake,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey)\r\n\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: staker_wallet_pubkey, isSigner: true, isWritable: false },\r\n        { pubkey: splToken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n        { pubkey: PDA_stake, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_per_wallet, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n    ]\r\n\r\n    let data = Uint8Array.of(2);\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = host_pubkey;\r\n    tx.recentBlockhash = (\r\n        await connection.getRecentBlockhash()\r\n    ).blockhash;\r\n\r\n    let signed = await provider.signTransaction(tx);\r\n    if (!signed) {\r\n        return { state: STATE_canceled };\r\n    }\r\n\r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n    let rtn = await axios.post('/api/reward', body);\r\n\r\n    return rtn.data;\r\n\r\n}\r\n\r\n/**\r\n * Calculate the total $CIETY of given staker's wallet\r\n * @param {*} address \r\n * @param {*} provider \r\n * @returns \r\n */\r\nexport const calc_reward = async (address, provider) => {\r\n    // 1. Call 'Stake Smart Contract'\r\n    let rtn = await reward(address, provider)\r\n    if (rtn.state == 'OK') {\r\n\r\n        // 2. Get stake info from the account derived from a given staker's wallet, the fee is paid by the staker\r\n        let info = await get_stake_info(address)\r\n\r\n        // 3. Sum up the total $CIETY of all NFTs of this staker\r\n        var ciety = 0\r\n        info.map(nft=>{\r\n            console.log('nft===', nft)\r\n            ciety += nft.accumulated_ciety\r\n        })\r\n        return ciety\r\n    }\r\n    return 0\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\layout.js",["722"],"let BufferLayout = require(\"buffer-layout\");\r\n\r\n/**\r\n * Layout for a public key\r\n */\r\nconst publicKey = (property = \"publicKey\") => {\r\n  return BufferLayout.blob(32, property);\r\n};\r\n\r\n/**\r\n * Layout for a 64bit unsigned value\r\n */\r\nconst uint64 = (property = \"uint64\") => {\r\n  return BufferLayout.blob(8, property);\r\n};\r\n\r\nexports.ESCROW_ACCOUNT_DATA_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.u8(\"isInitialized\"),\r\n  publicKey(\"initializerPubkey\"),\r\n  publicKey(\"initializerTempTokenAccountPubkey\"),\r\n  publicKey(\"initializerReceivingTokenAccountPubkey\"),\r\n  uint64(\"expectedAmount\"),\r\n]);\r\n\r\nconst config = require('./config.js')\r\nexports.CONFIG_ACCOUNT_DATA_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.u8(\"is_initialized\"),\r\n  publicKey(\"init_pubkey\"),\r\n  BufferLayout.u16('stake_min_days'),\r\n  BufferLayout.u16('stake_max_days'),\r\n  BufferLayout.u16('emission_total_days'),\r\n  BufferLayout.u8(\"ciety_decimals\"),\r\n  BufferLayout.u32('start_emission'),\r\n  BufferLayout.blob(8, 'init_timestamp'),\r\n  BufferLayout.u32('decay_frequency_seconds'),\r\n]);\r\n\r\n\r\n\r\n// pub nft_account: Pubkey,\r\n// pub pda: Pubkey,\r\n// pub start_timestamp: i64,\r\n// pub time_length_day: u16,\r\n// pub accumulated_ciety: f32,\r\n// pub start_slot: u32,\r\n// pub end_slot: u32,\r\nexports.STAKED_DATA_LAYOUT = BufferLayout.struct([\r\n  publicKey(\"nft_account\"),\r\n  publicKey(\"pda\"),\r\n  BufferLayout.nu64('start_timestamp'),\r\n  BufferLayout.u16('time_length_day'),\r\n  BufferLayout.f32('accumulated_ciety'),\r\n  BufferLayout.u32('start_slot'),\r\n  BufferLayout.u32('end_slot'),\r\n]);\r\n\r\n\r\n","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\StakeV2.js",["723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox, TextField } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport * as SolmateList from '../../solmate/v2_list_wallet_nfts';\r\nimport {v2_stake} from '../../solmate/v2_stake';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function Stake() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState(<></>)\r\n    const [selects, setSelects] = useState([])\r\n    const [timeLength, setTimeLength] = useState(7)\r\n    const [provider, setProvider] = useState(null)\r\n    const [max_nft_to_stake, setMax_nft_to_stake] = useState(2);\r\n\r\n    const onList = () => {\r\n\r\n    }\r\n    const onStake = async () => {\r\n        let nfts = []\r\n        records.map(rec=>{\r\n            if(rec.selected) nfts.push(rec)\r\n        })\r\n        if(nfts.length==0)return\r\n        let rtn = await v2_stake(address, timeLength ,nfts, provider)\r\n\r\n        console.log('stake result: ', rtn)\r\n    }\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const onChange = (a, ind) => {\r\n        records[ind].selected = !(records[ind].selected)\r\n        selects[ind] = !selects[ind]\r\n        setSelects(selects)\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n        let nfts = await SolmateList.list(wallet)\r\n        setRecords(nfts)\r\n        let x = nfts.map(n => n.selected)\r\n        setSelects(x)\r\n    }\r\n\r\n    const x = () => {\r\n        let y = records.map((r, ind) => {\r\n            return <Grid key={ind} item xs={12}>\r\n                <Card sx={{ minWidth: 500 }} style={{ marginLeft: '30px', marginTop: '30px' }}>\r\n                    <CardContent>\r\n                        <Typography style={{ color: '#aaaaaa' }} gutterBottom>\r\n                            Account: {r.account}\r\n                        </Typography>\r\n                        <Typography style={{ color: '#aaaaaa' }} >\r\n                            Mint: {r.mint}\r\n                        </Typography>\r\n                        <img src={r.metadata.image} width='100px' height='100px'/>\r\n                        <Checkbox\r\n                            checked={selects[ind]}\r\n                            onChange={a => onChange(a, ind)}\r\n                        />\r\n                        <Controls.AutoInfo title={'INFO'} entity={r}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        })\r\n\r\n        setContent(y)\r\n    }\r\n\r\n    useEffect(a => {\r\n        x()\r\n    }, [records])\r\n\r\n    const onChange_time_length_days = (e) =>{\r\n        const { name, value } = e.target\r\n        setTimeLength(value)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => onStake()}>Stake</Button>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    {/* <Controls.Input\r\n                        name=\"timeLength\"\r\n                        label=\"Time Length(hours)\"\r\n                        value={timeLength}\r\n                    /> */}\r\n                    \r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"Time Length(days)\"\r\n                        name='time_length_days'\r\n                        value={timeLength}\r\n                        onChange = {onChange_time_length_days}\r\n                    />\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n\r\n            <Grid container>{content}</Grid>\r\n        </>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_stake.js",["751","752","753","754","755","756","757"],"import { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\n\r\nimport host from './host_wallet.json';\r\nimport {config} from './v2_config';\r\n\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\n\r\nconst STATE_canceled = 'STATE_canceled'\r\n\r\nexport const v2_stake = async (staker_wallet, time_length, nfts = [], provider) => {\r\n    if(nfts.length>config.unstake_batch_size){\r\n        return {state:'ERR', msg:'you cannot stake more than '+config.unstake_batch_size+' NFTs because the trasaction size has a limit.'}\r\n    }\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n\r\n    // 0. Create a Pwdm account\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n    let per_wallet_data = null\r\n    try {\r\n        per_wallet_data = (await connection.getAccountInfo(PDA_pwdm, 'confirmed')).data\r\n    } catch (err) {\r\n    }\r\n    if (!per_wallet_data) {\r\n        ixs.push(SystemProgram.createAccountWithSeed({\r\n            fromPubkey: staker_wallet_pubkey,\r\n            newAccountPubkey: PDA_pwdm,\r\n            basePubkey: staker_wallet_pubkey,\r\n            seed: config.seed_pwdm,\r\n            lamports: await connection.getMinimumBalanceForRentExemption(config.pwdm_size, 'singleGossip'),\r\n            space: config.pwdm_size,\r\n            programId: stake_program_pubkey\r\n        }))\r\n    }\r\n\r\n    // 1. Transfer staker's NFT to Stake Program\r\n    let escrowed_pubkeys = [];\r\n    for (var i = 0; i < nfts.length; i++) {\r\n        const to = await Token.getAssociatedTokenAddress(\r\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n            TOKEN_PROGRAM_ID,\r\n            new PublicKey(nfts[i].mint),\r\n            host_pubkey\r\n        );\r\n        escrowed_pubkeys.push(to);\r\n\r\n        ixs.push(Token.createTransferInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            new PublicKey(nfts[i].account),\r\n            to,\r\n            staker_wallet_pubkey,\r\n            [],\r\n            1,\r\n        ));\r\n    }\r\n\r\n    // 2. Call Stake Program\r\n    const PDA_gsdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gsdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey);\r\n\r\n \r\n        // let account_iter = &mut accounts.iter();\r\n        // let acc_init = next_account_info(account_iter)?;\r\n        // let acc_pwdm = next_account_info(account_iter)?;\r\n        // let acc_gcdm = next_account_info(account_iter)?;\r\n        // let acc_gsdm = next_account_info(account_iter)?;\r\n        // let acc_token_prog = next_account_info(account_iter)?;\r\n        // let acc_sys_prog = next_account_info(account_iter)?;\r\n        // let acc_rent = next_account_info(account_iter)?;\r\n        // let acc_config = next_account_info(account_iter)?;\r\n\r\n    let data = Uint8Array.of(0,\r\n        ...new BN(time_length).toArray(\"le\", 2),\r\n        ...new BN(nfts.length).toArray(\"le\", 2));\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: PDA_pwdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gcdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gsdm, isSigner: false, isWritable: true },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    for (var i = 0; i < escrowed_pubkeys.length; i++) {\r\n        let nft_acc_pubkey = escrowed_pubkeys[i];\r\n        let nft_mint_pubkey = new PublicKey(nfts[i].mint);\r\n        const PDA = await PublicKey.findProgramAddress([Buffer.from(\"ciety_reward\"), nft_mint_pubkey.toBuffer()], stake_program_pubkey);\r\n        keys.push({ pubkey: nft_acc_pubkey, isSigner: false, isWritable: false })\r\n        keys.push({ pubkey: nft_mint_pubkey, isSigner: false, isWritable: false })\r\n        keys.push({ pubkey: PDA[0], isSigner: false, isWritable: false })\r\n        keys.push({ pubkey: new PublicKey(nfts[i]['mintAuthority']), isSigner: false, isWritable: false })\r\n    }\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = staker_wallet_pubkey;\r\n    while(!tx.recentBlockhash)\r\n    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\r\n\r\n    let signed = null;\r\n    try{\r\n        signed = await provider.signTransaction(tx);\r\n    }catch(err){\r\n        return { state: STATE_canceled };\r\n    }\r\n\r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n    let rtn = await axios.post('/api/v2_stake', body);\r\n\r\n    return rtn.data;\r\n}","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_config.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\RewardV2.js",["758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport {v2_reward} from '../../solmate/v2_reward';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function RewardV2() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState(null)\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState(<></>)\r\n    const [selects, setSelects] = useState([])\r\n    const [timeLength, setTimeLength] = useState(7)\r\n    const [provider, setProvider] = useState(null)\r\n    const [max_nft_to_stake, setMax_nft_to_stake] = useState(2);\r\n    const [rewardAmount, setRewardAmount] = useState(0)\r\n\r\n\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n    }\r\n\r\n    const onClick = async () => {\r\n        let ciety = await v2_reward(address, provider)\r\n        setRewardAmount(ciety)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" onClick={onClick} >Resolve Reward</Button>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Rewarded $CIETY:   {rewardAmount}\r\n            </Typography>\r\n\r\n            <Grid container>{content}</Grid>\r\n        </div>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_reward.js",["792","793","794","795","796","797","798","799","800","801","802","803","804","805"],"import { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport {config} from './v2_config';\r\nimport generated from './generated';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport host from './host_wallet.json';\r\nimport * as splToken from '@solana/spl-token';\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport {read_pwdm} from './read_chain_inspector';\r\n\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\nconst STATE_canceled = 'STATE_canceled'\r\n\r\n/**\r\n * Call 'Stake Smart Contract' to calculate his total reward of $CIETY, the contract will store rewards of all NFTs into\r\n * the staker's account\r\n * @param {*} staker_wallet \r\n * @param {*} provider \r\n * @returns \r\n */\r\nexport const v2_reward = async (staker_wallet, provider) => {\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey)\r\n    \r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey)\r\n\r\n        // let acc_init = next_account_info(account_iter)?;\r\n        // let acc_pwdm = next_account_info(account_iter)?;\r\n        // let acc_gcdm = next_account_info(account_iter)?;\r\n        // let acc_config = next_account_info(account_iter)?;\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: PDA_pwdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gcdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n    ]\r\n\r\n    let data = Uint8Array.of(2);\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = staker_wallet_pubkey;\r\n    tx.recentBlockhash = (\r\n        await connection.getRecentBlockhash()\r\n    ).blockhash;\r\n\r\n    let signed = null;\r\n    try {\r\n        signed = await provider.signTransaction(tx);\r\n    } catch (err) {\r\n        return { state: STATE_canceled };\r\n    }\r\n    \r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n\r\n    let rtn = await axios.post('/api/v2_reward', body);\r\n\r\n    let pwdm = await read_pwdm(staker_wallet);\r\n\r\n    return pwdm.ciety;\r\n\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_get_stake_info.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\UnstakeV2.js",["806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport {v2_unstake} from '../../solmate/v2_unstake';\r\nimport {read_pwdm} from '../../solmate/read_chain_inspector';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function UnstakeV2() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState(null)\r\n    const [content, setContent] = useState({})\r\n    const [provider, setProvider] = useState(null)\r\n    const [ciety, setCiety] = useState(0)\r\n    const [count, setCount] = useState(0)\r\n\r\n    const onUnstake = async () => {\r\n        let rtn = await v2_unstake(address, provider)\r\n        console.log('unstake result: ', rtn)\r\n    }\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n        let pwdm = await read_pwdm(wallet)\r\n        setContent(pwdm)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => onUnstake()}>Unstake</Button>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n\r\n            <Controls.AutoInfo title={'INFO'} entity={content}/>\r\n        </>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_unstake.js",["837","838","839","840","841","842","843","844","845","846"],"import { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { V2_STAKED_DATA_LAYOUT } from './v2_layout';\r\nimport host from './host_wallet.json';\r\nimport { config } from './v2_config';\r\nimport * as splToken from '@solana/spl-token';\r\nimport { read_pwdm } from './read_chain_inspector';\r\nimport * as DataLayout from './read_chain_common';\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\n\r\nconst STATE_canceled = 'STATE_canceled'\r\nconst STATE_ok = 'OK'\r\n\r\nconst check_nft_expiration = async (staker_wallet, provider) => {\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey);\r\n\r\n    // let acc_init = next_account_info(account_iter)?;\r\n    // let acc_pwdm = next_account_info(account_iter)?;\r\n    // let acc_gcdm = next_account_info(account_iter)?;\r\n    // let acc_config = next_account_info(account_iter)?;\r\n    let ixs = [];\r\n    let data = Uint8Array.of(6);\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: PDA_pwdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gcdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = staker_wallet_pubkey;\r\n    while (!tx.recentBlockhash)\r\n        tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\r\n\r\n    let signed = null;\r\n    try {\r\n        signed = await provider.signTransaction(tx);\r\n    } catch (err) {\r\n        return { state: STATE_canceled };\r\n    }\r\n\r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n    let rtn2 = await axios.post('/api/v2_check_expiration', body);\r\n    return rtn2.data;\r\n}\r\n\r\n\r\nexport const v2_unstake = async (staker_wallet, provider) => {\r\n    try{\r\n        await check_nft_expiration(staker_wallet, provider);\r\n    }catch(err){\r\n        console.log(err);\r\n        return {state:'ERR', msg:'Got NFTs not on due, or the chain crashed'}\r\n    }\r\n\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_ciety = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_ciety,\r\n        splToken.TOKEN_PROGRAM_ID);\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey);\r\n\r\n    let pubkey_ciety_mint = new PublicKey(config.ciety_mint_addr);\r\n    let pubkey_ciety_receiver = await Token.getAssociatedTokenAddress(\r\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        TOKEN_PROGRAM_ID,\r\n        pubkey_ciety_mint,\r\n        staker_wallet_pubkey\r\n    );\r\n    let pubkey_ciety_pda = await PublicKey.findProgramAddress([Buffer.from(\"ciety_reward\"), pubkey_ciety_mint.toBuffer()], token_program_pubkey);\r\n\r\n    let pwdm = null;\r\n\r\n    let ciety_receiver_data = null\r\n    let ins0 = null;\r\n    try {\r\n        pwdm = await read_pwdm(staker_wallet);\r\n    } catch (err) {\r\n        console.log(err)\r\n        return { state: 'ERR', msg:'Maybe the chain is unstable' }\r\n    }\r\n    try {\r\n        ciety_receiver_data = (await connection.getAccountInfo(pubkey_ciety_receiver, 'confirmed')).data\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    if (!ciety_receiver_data) {\r\n        ins0 = Token.createAssociatedTokenAccountInstruction(\r\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n            TOKEN_PROGRAM_ID,\r\n            pubkey_ciety_mint,\r\n            pubkey_ciety_receiver,\r\n            staker_wallet_pubkey,\r\n            staker_wallet_pubkey,\r\n        );\r\n    }\r\n\r\n    let ind_intervals = []\r\n    let ind_start = pwdm.unstake_start\r\n    while(true){\r\n        let ind_end = ind_start + config.unstake_batch_size\r\n        if(ind_end >= pwdm.nft_count){\r\n            ind_intervals.push({start:ind_start, end:pwdm.nft_count})\r\n            break;\r\n        }else{\r\n            ind_intervals.push({start:ind_start, end:ind_end})\r\n            ind_start = ind_end\r\n        }\r\n    }\r\n    let rtn = { state: STATE_ok }\r\n    let created = false\r\n    for (var k = 0; k < ind_intervals.length; k++) {\r\n        let {start, end} = ind_intervals[k]\r\n        let ixs = []\r\n        if(ciety_receiver_data){\r\n\r\n        }else{\r\n            if(created){\r\n\r\n            }else{\r\n                ixs.push(ins0)\r\n                created = true\r\n            }\r\n        }\r\n        /**\r\n     *      let acc_init = next_account_info(account_iter)?;\r\n            let acc_ciety = next_account_info(account_iter)?;\r\n            let acc_pwdm = next_account_info(account_iter)?;\r\n            let acc_gcdm = next_account_info(account_iter)?;\r\n            let acc_token_prog = next_account_info(account_iter)?;\r\n            let acc_sys_prog = next_account_info(account_iter)?;\r\n            let acc_rent = next_account_info(account_iter)?;\r\n            let acc_config = next_account_info(account_iter)?;\r\n            let acc_staker = next_account_info(account_iter)?;\r\n            let acc_solmate_token_prog = next_account_info(account_iter)?;\r\n            let acc_ciety_receiver = next_account_info(account_iter)?;\r\n            let acc_ciety_mint = next_account_info(account_iter)?;\r\n            let acc_ciety_pda = next_account_info(account_iter)?;\r\n     */\r\n        let data = Uint8Array.of(3);\r\n        let keys = [\r\n            { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n            { pubkey: PDA_ciety, isSigner: false, isWritable: true },\r\n            { pubkey: PDA_pwdm, isSigner: false, isWritable: true },\r\n            { pubkey: PDA_gcdm, isSigner: false, isWritable: true },\r\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n            { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n            { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n            { pubkey: staker_wallet_pubkey, isSigner: false, isWritable: false },\r\n            { pubkey: token_program_pubkey, isSigner: false, isWritable: false },\r\n            { pubkey: pubkey_ciety_receiver, isSigner: false, isWritable: true },\r\n            { pubkey: pubkey_ciety_mint, isSigner: false, isWritable: false },\r\n            { pubkey: pubkey_ciety_pda[0], isSigner: false, isWritable: false },\r\n        ];\r\n\r\n        for (var i = start; i < end; i++) {\r\n            let repeated = pwdm.repeated[i]\r\n            let pubkey_nft_account = new PublicKey(repeated.nft_account);\r\n            let pubkey_nft_mint = new PublicKey(repeated.nft_mint);\r\n            let pubkey_nft_pda = await PublicKey.findProgramAddress([Buffer.from(\"ciety_reward\"), pubkey_nft_mint.toBuffer()], stake_program_pubkey);\r\n            let pubkey_solmate_receiver = await Token.getAssociatedTokenAddress(\r\n                SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n                TOKEN_PROGRAM_ID,\r\n                pubkey_nft_mint,\r\n                staker_wallet_pubkey\r\n            );\r\n\r\n            keys.push({ pubkey: pubkey_nft_account, isSigner: false, isWritable: true });\r\n            keys.push({ pubkey: pubkey_nft_pda[0], isSigner: false, isWritable: false });\r\n            keys.push({ pubkey: pubkey_nft_mint, isSigner: false, isWritable: false });\r\n            keys.push({ pubkey: pubkey_solmate_receiver, isSigner: false, isWritable: true });\r\n        }\r\n\r\n        ixs.push(new TransactionInstruction({\r\n            programId: stake_program_pubkey,\r\n            keys: keys,\r\n            data: Buffer.from(data)\r\n        }));\r\n\r\n        const tx = new Transaction().add(...ixs);\r\n        tx.feePayer = staker_wallet_pubkey;\r\n        while (!tx.recentBlockhash)\r\n            tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\r\n\r\n        let signed = null;\r\n        try {\r\n            signed = await provider.signTransaction(tx);\r\n        } catch (err) {\r\n            return { state: STATE_canceled };\r\n        }\r\n\r\n        let body = {\r\n            tx_wire: signed.serialize({\r\n                requireAllSignatures: false,\r\n                verifySignatures: false\r\n            })\r\n        };\r\n        let rtn2 = await axios.post('/api/v2_unstake', body);\r\n        if( rtn2.data.state != STATE_ok){\r\n            return rtn2.data;\r\n        };\r\n    }\r\n    return rtn;\r\n}","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_layout.js",["847"],"const BufferLayout = require(\"buffer-layout\");\r\n\r\n/**\r\n * Layout for a public key\r\n */\r\nconst publicKey = (property = \"publicKey\") => {\r\n  return BufferLayout.blob(32, property);\r\n};\r\n\r\n/**\r\n * Layout for a 64bit unsigned value\r\n */\r\nconst uint64 = (property = \"uint64\") => {\r\n  return BufferLayout.blob(8, property);\r\n};\r\n\r\nexports.V2_STAKED_DATA_LAYOUT = BufferLayout.struct([\r\n  publicKey(\"nft_account\"),\r\n  publicKey(\"nft_mint\"),\r\n  BufferLayout.u16('nft_nth'),\r\n  BufferLayout.blob(8, 'start_timestamp'),\r\n  BufferLayout.u16('time_length_days'),\r\n]);","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_get_pwdm.js",["848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865"],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\ChainInspector.js",["866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport * as v2_ciety from '../../solmate/v2_ciety';\r\nimport {read_config, read_pwdm, read_gcdm, read_gsdm, read_rpdm} from '../../solmate/read_chain_inspector';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function ChainInspector() {\r\n    const classes = useStyles();\r\n    const [title, setTitle] = useState('')\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState({})\r\n    const [provider, setProvider] = useState(null)\r\n    const [addressFields, setAddressFields] = useState([])\r\n\r\n    const load_config_info = async () => {\r\n        let rtn = await read_config()\r\n        setContent(rtn)\r\n        setTitle('Config Info')\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n    \r\n    const load_pwdm_info = async () => {\r\n        try{\r\n            let rtn = await read_pwdm(address)\r\n            setContent(rtn)\r\n            setTitle('Pwdm Info')\r\n\r\n        }catch(err){\r\n            setContent({})\r\n            setTitle('Pwdm has been closed, or the chain crashed')\r\n\r\n        }\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n    \r\n    const load_gcdm_info = async () => {\r\n        let rtn = await read_gcdm(address)\r\n        setContent(rtn)\r\n        setTitle('Gcdm Info')\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n    \r\n    const load_gsdm_info = async () => {\r\n        let rtn = await read_gsdm()\r\n        setContent(rtn)\r\n        setTitle('Gsdm Info')\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n    \r\n    const load_rpdm_info = async () => {\r\n        let rtn = await read_rpdm(address)\r\n        setContent(rtn)\r\n        setTitle('Rpdm Info')\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n\r\n    const load_ciety_info = async () => {\r\n        let rtn = await v2_ciety.list()\r\n        setContent(rtn)\r\n        setTitle('Ciety Info')\r\n        setAddressFields(['/init_pubkey', '/nft_author'])\r\n    }\r\n\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress_2 = async (wallet) => {\r\n        setAddress(wallet)\r\n    }\r\n\r\n    const x = () => {\r\n        let y = records.map((r, ind) => {\r\n            return <Grid key={ind} item xs={12}>\r\n                <Card sx={{ minWidth: 500 }} style={{ marginLeft: '30px', marginTop: '30px' }}>\r\n                    <CardContent>\r\n                        <Controls.AutoInfo title={'INFO'} entity={r} keyby={'pda'}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        })\r\n\r\n        setContent(y)\r\n    }\r\n\r\n    // useEffect(a => {\r\n    //     x()\r\n    // }, [records])\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={2}>\r\n                    <SelectWalletButton key='Inspector' variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress_2} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => load_pwdm_info()}>Pwdm</Button>\r\n                </Grid>            \r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => load_config_info()}>Config</Button>\r\n                </Grid> \r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => load_gcdm_info()}>Gcdm</Button>\r\n                </Grid>                \r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => load_gsdm_info()}>Gsdm</Button>\r\n                </Grid>                    \r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => load_rpdm_info()}>Rpdm</Button>\r\n                </Grid>                       \r\n                <Grid item xs={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => load_ciety_info()}>Ciety</Button>\r\n                </Grid>                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n\r\n            {/* <Grid container>{content}</Grid> */}\r\n            <Controls.AutoInfo title={title} entity={content} addressFields={addressFields} />\r\n        </>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\read_chain_inspector.js",["891","892","893","894","895","896"],"import * as DATA_LAYOUT from \"./read_chain_common\";\r\nimport {config} from './v2_config';\r\nimport { Connection, programs } from '@metaplex/js';\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport host_wallet from './host_wallet.json';\r\n\r\nconst connection = new Connection('devnet');\r\n\r\n\r\nconst stake_program_pubkey = new PublicKey(config.stake_program_addr);\r\nconst token_program_pubkey = new PublicKey(config.token_program_addr);\r\n\r\nconst host_pubkey = new PublicKey(config.host_wallet_addr);\r\n\r\nconst get_curr_slot = async () => {\r\n    let config_dm = await read_config()\r\n    let rtn = Math.floor((new Date().getTime()/1000 - new Date(config_dm.init_timestamp).getTime()/1000) / config_dm.decay_frequency_seconds)\r\n    return rtn\r\n}\r\n\r\nexport const read_config = async () => {\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey)\r\n    const config_raw = (await connection.getAccountInfo(PDA_config, 'confirmed')).data\r\n    const config_dm = DATA_LAYOUT.CONFIG.decode(config_raw)\r\n    return {\r\n        is_initialized: config_dm.is_initialized ? true : false,\r\n        init_pubkey: new PublicKey(config_dm.init_pubkey).toString(),\r\n        stake_min_days: config_dm.stake_min_days,\r\n        stake_max_days: config_dm.stake_max_days,\r\n        emission_total_days: config_dm.emission_total_days,\r\n        ciety_decimals: config_dm.ciety_decimals,\r\n        start_emission: config_dm.start_emission,\r\n        init_timestamp: new Date(config_dm.init_timestamp * 1000).toISOString(),\r\n        decay_frequency_seconds: config_dm.decay_frequency_seconds,\r\n        end_slot: config_dm.end_slot,\r\n        nft_author: new PublicKey(config_dm.nft_author).toString(),\r\n        total_nfts: config_dm.total_nfts,\r\n        max_stake_per_wallet: config_dm.max_stake_per_wallet,\r\n        max_stake_each_time: config_dm.max_stake_each_time,\r\n        debug: config_dm.debug,\r\n    }\r\n}\r\n\r\nexport const read_pwdm = async (stake_wallet) => {\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        new PublicKey(stake_wallet),\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n    const pwdm_raw = (await connection.getAccountInfo(PDA_pwdm, 'confirmed')).data\r\n\r\n    let ind = 0\r\n    let slice = pwdm_raw.slice(ind, ind + DATA_LAYOUT.PWDM_HEAD_LENGTH)\r\n    let pwdm_head = DATA_LAYOUT.PWDM_HEAD.decode(slice)\r\n    let rtn = {\r\n        is_initialized: pwdm_head.is_initialized ? true : false,\r\n        ciety: pwdm_head.ciety,\r\n        nft_count: pwdm_head.nft_count,\r\n        unstake_start: pwdm_head.unstake_start,\r\n        repeated: []\r\n    }\r\n    ind = ind + DATA_LAYOUT.PWDM_HEAD_LENGTH\r\n\r\n    for (var i = 0; i < pwdm_head.nft_count; i++) {\r\n        slice = pwdm_raw.slice(ind, ind + DATA_LAYOUT.PWDM_REPEATED_LENGTH)\r\n        let pwdm_repeated = DATA_LAYOUT.PWDM_REPEATED.decode(slice)\r\n        rtn.repeated.push({\r\n            nft_account: new PublicKey(pwdm_repeated.nft_account).toBase58(),\r\n            nft_mint: new PublicKey(pwdm_repeated.nft_mint).toBase58(),\r\n            nft_nth: pwdm_repeated.nft_nth,\r\n            start_timestamp: new Date(pwdm_repeated.start_timestamp * 1000).toISOString(),\r\n            time_length_days: pwdm_repeated.time_length_days,\r\n        })\r\n        ind = ind + DATA_LAYOUT.PWDM_REPEATED_LENGTH\r\n    }\r\n    return rtn\r\n}\r\n\r\n\r\nexport const read_gcdm = async () => {\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey)\r\n    const gcdm_raw = (await connection.getAccountInfo(PDA_gcdm, 'confirmed')).data\r\n\r\n    let ind = 0\r\n    let slice = gcdm_raw.slice(ind, ind + DATA_LAYOUT.GCDM_HEAD_LENGTH)\r\n    let gcdm_head = DATA_LAYOUT.GCDM_HEAD.decode(slice)\r\n    let rtn = {\r\n        is_initialized: gcdm_head.is_initialized ? true : false,\r\n        last_calc_slot: gcdm_head.last_calc_slot,\r\n        global_nft_count: gcdm_head.global_nft_count,\r\n        repeated: []\r\n    }\r\n    ind = ind + DATA_LAYOUT.GCDM_HEAD_LENGTH\r\n\r\n    for (var i = 0; i < rtn.global_nft_count; i++) {\r\n        slice = gcdm_raw.slice(ind, ind + DATA_LAYOUT.GCDM_REPEATED_LENGTH)\r\n        let gcdm_repeated = DATA_LAYOUT.GCDM_REPEATED.decode(slice)\r\n        rtn.repeated.push({\r\n            nft_ciety: gcdm_repeated.nft_ciety,\r\n            start_slot: gcdm_repeated.start_slot,\r\n            end_slot: gcdm_repeated.end_slot,\r\n        })\r\n        ind = ind + DATA_LAYOUT.GCDM_REPEATED_LENGTH\r\n    }\r\n    return rtn\r\n}\r\n\r\nexport const read_gsdm = async () => {\r\n\r\n    // Decode Gsdm\r\n    const PDA_gsdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gsdm,\r\n        stake_program_pubkey)\r\n    let gsdm_raw = (await connection.getAccountInfo(PDA_gsdm, 'confirmed')).data\r\n\r\n    // Read Gsdm head\r\n    let ind = 0\r\n    let slice = gsdm_raw.slice(ind, ind + DATA_LAYOUT.GSDM_HEAD_LENGTH)\r\n    let gsdm_head = DATA_LAYOUT.GSDM_HEAD.decode(slice)\r\n    let rtn = {\r\n        is_initialized: gsdm_head.is_initialized ? true : false,\r\n        repeated: []\r\n    }\r\n    ind = ind + DATA_LAYOUT.GSDM_HEAD_LENGTH\r\n\r\n    // Read Gsdm slots down to curr_slot, rather than to 365\r\n    let curr_slot = await get_curr_slot()\r\n    console.log('curr_slot===', curr_slot)\r\n    for (var slot = 0; slot < curr_slot; slot++) {\r\n        slice = gsdm_raw.slice(ind, ind + DATA_LAYOUT.GSDM_REPEATED_LENGTH)\r\n        let gsdm_repeated = DATA_LAYOUT.GSDM_REPEATED.decode(slice)\r\n\r\n        // Read nft_nth only down to last_ind, rather than to 7000\r\n        let nft_nths = []\r\n        for (var j = 0; j <= gsdm_repeated.nft_last_ind; j++) {\r\n            if (gsdm_repeated.nft_nth[j] == 1) {\r\n                nft_nths.push(j)\r\n            }\r\n        }\r\n\r\n        // Organize the repeated segment\r\n        if (nft_nths.length > 0) {\r\n            let tmp = {\r\n                slot: slot,\r\n                nft_count: gsdm_repeated.nft_count,\r\n                nft_last_ind: gsdm_repeated.nft_last_ind,\r\n                nft_nths: '['+nft_nths.toString()+']'\r\n            }\r\n            rtn.repeated.push(tmp)\r\n        } else {\r\n            // ignore empty slot\r\n        }\r\n\r\n        ind = ind + DATA_LAYOUT.GSDM_REPEATED_LENGTH\r\n    }\r\n    return rtn\r\n}\r\n\r\n\r\nexport const read_rpdm = async () => {\r\n    const PDA_rpdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_rpdm,\r\n        stake_program_pubkey)\r\n    const rpdm_raw = (await connection.getAccountInfo(PDA_rpdm, 'confirmed')).data\r\n\r\n    let ind = 0\r\n    let slice = rpdm_raw.slice(ind, ind + DATA_LAYOUT.RPDM_HEAD_LENGTH)\r\n    let rpdm_head = DATA_LAYOUT.RPDM_HEAD.decode(slice)\r\n    let rtn = {\r\n        is_initialized: rpdm_head.is_initialized ? true : false,\r\n        count_to_calc: rpdm_head.count_to_calc,\r\n        repeated: []\r\n    }\r\n    ind = ind + DATA_LAYOUT.RPDM_HEAD_LENGTH\r\n\r\n    for (var i = 0; i < rtn.count_to_calc; i++) {\r\n        slice = rpdm_raw.slice(ind, ind + DATA_LAYOUT.RPDM_REPEATED_LENGTH)\r\n        let rpdm_repeated = DATA_LAYOUT.RPDM_REPEATED.decode(slice)\r\n        rtn.repeated.push({\r\n            slot_nth: rpdm_repeated.slot_nth,\r\n            nft_nth: rpdm_repeated.nft_nth,\r\n        })\r\n        ind = ind + DATA_LAYOUT.RPDM_REPEATED_LENGTH\r\n    }\r\n    return rtn\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\read_chain_common.js",[],"D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\ExpandV2.js",["897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport useTable from \"../../ap_components/useTable\";\r\nimport * as commonService from \"../../ap_services/commonService\";\r\nimport * as tokenServices from \"../../ap_services/tokenServices\";\r\nimport Controls from \"../../ap_components/controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from \"../../ap_components/Popup\";\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from \"../../ap_components/Notification\";\r\nimport ConfirmDialog from \"../../ap_components/ConfirmDialog\";\r\nimport { Grid, Box, Checkbox, TextField } from '@material-ui/core';\r\nimport SelectWalletButton from '../../marsalgo/wallet_select_button';\r\n// import '../../css/main.css';\r\n\r\nimport * as SolmateList from '../../solmate/v2_list_wallet_nfts';\r\nimport {v2_expand} from '../../solmate/v2_expand';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\n\r\nexport default function ExpandV2() {\r\n    const classes = useStyles();\r\n    const [address, setAddress] = useState('')\r\n    const [records, setRecords] = useState([])\r\n    const [content, setContent] = useState(<></>)\r\n    const [selects, setSelects] = useState([])\r\n    const [timeLength, setTimeLength] = useState(1)\r\n    const [provider, setProvider] = useState(null)\r\n    const [max_nft_to_stake, setMax_nft_to_stake] = useState(2);\r\n\r\n    const onExpand = async () => {\r\n        let rtn = await v2_expand(address, timeLength, provider)\r\n        console.log('stake result: ', rtn)\r\n    }\r\n    const setWalletType = () => {\r\n\r\n    }\r\n    const setBalance = () => {\r\n\r\n    }\r\n\r\n    const refreshAddress = async (wallet) => {\r\n        setAddress(wallet)\r\n    }\r\n\r\n    const onChange_time_length_days = (e) =>{\r\n        const { name, value } = e.target\r\n        setTimeLength(value)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <SelectWalletButton variant=\"contained\" setProvider={setProvider} setWalletType={setWalletType} setAddress={refreshAddress} setBalance={setBalance} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => onExpand()}>Extend</Button>\r\n                </Grid>\r\n                <Grid item xs={3}>                    \r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"Increase Time Length(days)\"\r\n                        name='time_length_days'\r\n                        value={timeLength}\r\n                        onChange = {onChange_time_length_days}\r\n                    />\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Typography variant=\"h4\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Staker Wallet:   {address}\r\n            </Typography>\r\n\r\n            <Grid container>{content}</Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_expand.js",["931","932","933","934","935","936","937","938","939","940","941"],"\r\nimport { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport * as web3 from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport axios from 'axios';\r\nimport bs58 from 'bs58';\r\nimport { SystemProgram, clusterApiUrl, Keypair, Connection, PublicKey, SYSVAR_RENT_PUBKEY, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\n\r\nimport host from './host_wallet.json';\r\nimport {config} from './v2_config';\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\nconst connection = new Connection(\r\n    clusterApiUrl(config.network),\r\n    'confirmed',\r\n);\r\n\r\nconst STATE_canceled = 'STATE_canceled'\r\n\r\nexport const v2_expand = async (staker_wallet, time_length, provider) => {\r\n    console.log('time_length=================', time_length)\r\n    console.log('time_length=================', time_length)\r\n    console.log('time_length=================', time_length)\r\n    console.log('time_length=================', time_length)\r\n    let ixs = []\r\n    let stake_program_pubkey = new PublicKey(config.stake_program_addr)\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let host_pubkey = new PublicKey(config.host_wallet_addr)\r\n    let staker_wallet_pubkey = new PublicKey(staker_wallet)\r\n\r\n    // 0. Create a Pwdm account\r\n    const PDA_pwdm = await PublicKey.createWithSeed(\r\n        staker_wallet_pubkey,\r\n        config.seed_pwdm,\r\n        stake_program_pubkey)\r\n\r\n    const PDA_gcdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gcdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_gsdm = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_gsdm,\r\n        stake_program_pubkey);\r\n\r\n    const PDA_config = await PublicKey.createWithSeed(\r\n        host_pubkey,\r\n        config.seed_config,\r\n        token_program_pubkey);\r\n\r\n    let data = Uint8Array.of(4,\r\n        ...new BN(time_length).toArray(\"le\", 2));        \r\n\r\n    let keys = [\r\n        { pubkey: host_pubkey, isSigner: true, isWritable: true },\r\n        { pubkey: PDA_pwdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gcdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_gsdm, isSigner: false, isWritable: true },\r\n        { pubkey: PDA_config, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    ixs.push(new TransactionInstruction({\r\n        programId: stake_program_pubkey,\r\n        keys: keys,\r\n        data: Buffer.from(data)\r\n    }));\r\n\r\n    const tx = new Transaction().add(...ixs);\r\n    tx.feePayer = staker_wallet_pubkey;\r\n    while(!tx.recentBlockhash)\r\n    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\r\n\r\n    let signed = null;\r\n    try {\r\n        signed = await provider.signTransaction(tx);\r\n    } catch (err) {\r\n        return { state: STATE_canceled };\r\n    }\r\n    \r\n    let body = {\r\n        tx_wire: signed.serialize({\r\n            requireAllSignatures: false,\r\n            verifySignatures: false\r\n        })\r\n    };\r\n    let rtn = await axios.post('/api/v2_expand', body);\r\n\r\n    return rtn.data;\r\n}","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_ciety.js",["942","943","944","945","946"],"import axios from 'axios';\r\nimport {config} from './v2_config';\r\nimport { Connection, programs } from '@metaplex/js';\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst { metadata: { Metadata } } = programs;\r\nconst connection = new Connection('devnet');\r\nconst TOKEN_METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\n\r\nexport async function list() {\r\n    \r\n    let pubkey_ciety_mint = new PublicKey(config.ciety_mint_addr);\r\n    let token_program_pubkey = new PublicKey(config.token_program_addr)\r\n    let escrow_pda = await PublicKey.findProgramAddress([Buffer.from(\"ciety_reward\"), pubkey_ciety_mint.toBuffer()], token_program_pubkey);\r\n    let body = {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"id\": 1,\r\n        \"method\": \"getTokenAccountsByOwner\",\r\n        \"params\": [\r\n            escrow_pda[0].toString(),\r\n            {\r\n                \"programId\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n            },\r\n            {\r\n                \"encoding\": \"jsonParsed\"\r\n            }\r\n        ]\r\n    }\r\n    let resp = await axios.post(\r\n        config.network_url, body\r\n    );\r\n\r\n    let rtn = []\r\n    resp.data.result.value.map(asset => {\r\n        let account = asset.pubkey;\r\n        let mint = asset.account.data.parsed.info.mint;\r\n        let owner = asset.account.data.parsed.info.owner;\r\n        let am = asset.account.data.parsed.info.tokenAmount;\r\n        if (mint.toString()==config.ciety_mint_addr) {\r\n            rtn.push({ account: account, mint: mint, owner:owner, amount:am })\r\n        }\r\n    })\r\n    \r\n    for(var i=0; i<rtn.length; i++){\r\n        try{\r\n\r\n            let mint = new PublicKey(rtn[i].mint);\r\n\r\n            // while(true){\r\n                const token = new Token(connection, mint, TOKEN_PROGRAM_ID);\r\n                let mint_info = await token.getMintInfo();\r\n                rtn[i]['mintAuthority']=mint_info.mintAuthority.toBase58();\r\n                // if(mint_info.mintAuthority){\r\n                //     break;\r\n                // }else{\r\n                //     await new Promise(f=>setTimeout(f,50));\r\n                // }\r\n            // }\r\n\r\n            \r\n        }catch(err){\r\n            console.log('err==', err)\r\n        }\r\n    }\r\n\r\n    return rtn[0]\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\pages\\solmate\\Readme.jsx",["947","948","949","950","951","952","953","954","955","956","957","958","959","960","961"],"import React, { useState, useEffect } from 'react'\r\n// import TokenForm from \"./TokenForm\";\r\nimport PageHeader from \"../../ap_components/PageHeader\";\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, CardActions, Card, CardContent, InputAdornment, Typography, Button } from '@material-ui/core';\r\nimport ReadmeImg from '../../images/data_model.png';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nexport default function Readme() {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Data Model\r\n            </Typography>\r\n            <img src={ReadmeImg} alt=\"AP\" style={{ marginTop: '20px' }} />\r\n            <Typography variant=\"h2\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Security & Biz Rules\r\n            </Typography>\r\n            <Typography variant=\"h5\" gutterBottom color='secondary' component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                <ol>\r\n                    <li>When initializing, the on-chain project configuration stores the host wallet key, after that,\r\n                        any calls to the contract will be checked as this:</li>\r\n                    <ul>\r\n                        <li>Assume the first account passed in is the host wallet</li>\r\n                        <li>It must be a signer</li>\r\n                        <li>It must be the same as the one remembered by the on-chain configuration</li>\r\n                        <li>The on-chain configuration must be intialized</li>\r\n                        <li>CONCLUSION: NO ONE CAN ATTACK YOUR CONTRACT AS LONG AS YOUR SECRET DOESN'T LEAK OUT</li>\r\n                    </ul>\r\n                    <li>The contract check if NFTs to be staked are valid by comparing their authority with on-chain pre-configured one</li>\r\n                    <li>max_stake_each_time, stake_min_days, stake_max_days and max_stake_per_wallet are all checked on-chain</li>\r\n                    <li>Both $CIETY and NFTs are locked into the contract, they can't be transfered outside of the contract</li>\r\n                    <li>A staker can't unstake his NFTs if any one NFT is still in its staking period</li>\r\n                </ol>\r\n            </Typography>\r\n            <Typography variant=\"h2\" gutterBottom component=\"div\" style={{ marginTop: '30px', color: '#aaaaff' }}>\r\n                Backend Configuration\r\n            </Typography>\r\n                <pre><code>\r\n    network: 'devnet',<br/>\r\n    stake_program_addr: 'HAoqALFTiyibSRgh63qUWX1sdxt82R3hCqSwAmk8Pysw',<br/>\r\n    token_program_addr: '7Pfq1Lz24RWDrsJxCYaFuw3J9vVwPvcNiPeu38ssLrRo',<br/>\r\n    gsdm_size: GSDM_SIZE,<br/>\r\n    gcdm_size: GCDM_SIZE,<br/>\r\n    rpdm_size: RPDM_SIZE,<br/>\r\n    seed_config: 'seed_config_21',<br/>\r\n    seed_ciety: 'seed_ciety_21',<br/>\r\n    seed_gsdm: 'seed_gsdm_21',<br/>\r\n    seed_gcdm: 'seed_gcdm_21',<br/>\r\n    seed_pwdm: 'seed_pwdm_21',<br/>\r\n    seed_rpdm: 'seed_rpdm_21',<br/>\r\n    \r\n    total_supply: 1000000000,<br/>\r\n    to_community_percent: 0.2,<br/>\r\n    to_community_address: 'AJz6nffDtCBtquZj4gSHMj9YjHDhETZe2RpA2S9Pfqf4',<br/>\r\n    to_team_percent: 0.05,\r\n    to_team_addresses: ['DnUspL6hJpp7edGF2LGt4vSEUwttYxvVR3LtuEHs3QM8', '2qwZumjVu8CCasFHxL31YhzrMwN3ubkM8XzupGxPZ6u1'],<br/>\r\n    to_rewards_percent: 0.75,<br/>\r\n\r\n    // below on-chain<br/>\r\n    stake_min_days: 7,<br/>\r\n    stake_max_days: 365,<br/>\r\n    emission_total_days: 365*2,<br/>\r\n    ciety_decimals: 9,<br/>\r\n    start_emission: 100000,<br/>\r\n    decay_frequency_seconds: 60 * 1,<br/>\r\n    total_nfts: TOTAL_NFTS,<br/>\r\n    max_stake_per_wallet: 100,<br/>\r\n    max_stake_each_time: 5,<br/>\r\n    debug: 1,<br/>\r\n    \r\n    nft_author: '9MJzW1oEzvjHnmdLdoGRGr1i4hu82g7eEEnxvmifcDZD',<br/>\r\n                </code></pre>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","D:\\mike\\solmates\\app_frontend\\src\\solmate\\v2_list_wallet_nfts.js",["962","963","964","965"],"import axios from 'axios';\r\nimport {config} from './v2_config';\r\nimport { Connection, programs } from '@metaplex/js';\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { AccountLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst { metadata: { Metadata } } = programs;\r\nconst connection = new Connection('devnet');\r\nconst TOKEN_METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\n\r\n\r\nexport async function list(wallet) {\r\n    let body = {\r\n        \"jsonrpc\": \"2.0\",\r\n        \"id\": 1,\r\n        \"method\": \"getTokenAccountsByOwner\",\r\n        \"params\": [\r\n            wallet,\r\n            {\r\n                \"programId\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n            },\r\n            {\r\n                \"encoding\": \"jsonParsed\"\r\n            }\r\n        ]\r\n    }\r\n    let resp = await axios.post(\r\n        config.network_url, body\r\n    );\r\n\r\n    let rtn = []\r\n    resp.data.result.value.map(asset => {\r\n        let account = asset.pubkey;\r\n        let mint = asset.account.data.parsed.info.mint;\r\n        let am = asset.account.data.parsed.info.tokenAmount;\r\n        if (am.amount == 1 && am.decimals == 0) {\r\n            rtn.push({ account: account, mint: mint, selected:false })\r\n        }\r\n    })\r\n    \r\n\r\n    let rtn2 = []\r\n    for(var i=0; i<rtn.length; i++){\r\n        try{\r\n\r\n            let mint = new PublicKey(rtn[i].mint);\r\n\r\n            // while(true){\r\n                const token = new Token(connection, mint, TOKEN_PROGRAM_ID);\r\n                let mint_info = await token.getMintInfo();\r\n                rtn[i]['mintAuthority']=mint_info.mintAuthority.toBase58();\r\n                // if(mint_info.mintAuthority){\r\n                //     break;\r\n                // }else{\r\n                //     await new Promise(f=>setTimeout(f,50));\r\n                // }\r\n            // }\r\n\r\n            let metadata_account_pubkey = (await PublicKey.findProgramAddress(\r\n                [\r\n                  Buffer.from(\"metadata\"),\r\n                  TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                  mint.toBuffer(),\r\n                ],\r\n                TOKEN_METADATA_PROGRAM_ID\r\n              )\r\n            )[0];\r\n\r\n            const resp = await Metadata.load(connection, metadata_account_pubkey);\r\n            const { data } = await axios.get(resp.data.data.uri);\r\n            rtn[i]['metadata']=data;\r\n            rtn2.push( rtn[i]);\r\n        }catch(err){\r\n            console.log('err==', err)\r\n        }\r\n    }\r\n\r\n    return rtn2\r\n}\r\n",{"ruleId":"966","replacedBy":"967"},{"ruleId":"968","replacedBy":"969"},{"ruleId":"970","severity":1,"message":"971","line":13,"column":10,"nodeType":"972","messageId":"973","endLine":13,"endColumn":23},{"ruleId":"970","severity":1,"message":"974","line":13,"column":25,"nodeType":"972","messageId":"973","endLine":13,"endColumn":36},{"ruleId":"970","severity":1,"message":"975","line":13,"column":38,"nodeType":"972","messageId":"973","endLine":13,"endColumn":48},{"ruleId":"970","severity":1,"message":"976","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":13},{"ruleId":"970","severity":1,"message":"977","line":9,"column":14,"nodeType":"972","messageId":"973","endLine":9,"endColumn":24},{"ruleId":"970","severity":1,"message":"978","line":9,"column":26,"nodeType":"972","messageId":"973","endLine":9,"endColumn":30},{"ruleId":"970","severity":1,"message":"979","line":10,"column":8,"nodeType":"972","messageId":"973","endLine":10,"endColumn":12},{"ruleId":"970","severity":1,"message":"980","line":14,"column":18,"nodeType":"972","messageId":"973","endLine":14,"endColumn":30},{"ruleId":"970","severity":1,"message":"981","line":15,"column":17,"nodeType":"972","messageId":"973","endLine":15,"endColumn":28},{"ruleId":"970","severity":1,"message":"982","line":16,"column":16,"nodeType":"972","messageId":"973","endLine":16,"endColumn":26},{"ruleId":"970","severity":1,"message":"983","line":4,"column":11,"nodeType":"972","messageId":"973","endLine":4,"endColumn":19},{"ruleId":"970","severity":1,"message":"984","line":5,"column":24,"nodeType":"972","messageId":"973","endLine":5,"endColumn":41},{"ruleId":"970","severity":1,"message":"985","line":7,"column":17,"nodeType":"972","messageId":"973","endLine":7,"endColumn":31},{"ruleId":"970","severity":1,"message":"986","line":8,"column":16,"nodeType":"972","messageId":"973","endLine":8,"endColumn":25},{"ruleId":"970","severity":1,"message":"987","line":9,"column":21,"nodeType":"972","messageId":"973","endLine":9,"endColumn":32},{"ruleId":"970","severity":1,"message":"988","line":10,"column":19,"nodeType":"972","messageId":"973","endLine":10,"endColumn":30},{"ruleId":"970","severity":1,"message":"989","line":11,"column":18,"nodeType":"972","messageId":"973","endLine":11,"endColumn":25},{"ruleId":"970","severity":1,"message":"990","line":23,"column":8,"nodeType":"972","messageId":"973","endLine":23,"endColumn":11},{"ruleId":"970","severity":1,"message":"991","line":29,"column":8,"nodeType":"972","messageId":"973","endLine":29,"endColumn":12},{"ruleId":"970","severity":1,"message":"992","line":34,"column":8,"nodeType":"972","messageId":"973","endLine":34,"endColumn":13},{"ruleId":"970","severity":1,"message":"993","line":35,"column":8,"nodeType":"972","messageId":"973","endLine":35,"endColumn":15},{"ruleId":"970","severity":1,"message":"994","line":6,"column":3,"nodeType":"972","messageId":"973","endLine":6,"endColumn":12},{"ruleId":"970","severity":1,"message":"995","line":7,"column":3,"nodeType":"972","messageId":"973","endLine":7,"endColumn":7},{"ruleId":"970","severity":1,"message":"996","line":8,"column":3,"nodeType":"972","messageId":"973","endLine":8,"endColumn":11},{"ruleId":"970","severity":1,"message":"997","line":9,"column":3,"nodeType":"972","messageId":"973","endLine":9,"endColumn":6},{"ruleId":"970","severity":1,"message":"978","line":10,"column":3,"nodeType":"972","messageId":"973","endLine":10,"endColumn":7},{"ruleId":"970","severity":1,"message":"998","line":14,"column":18,"nodeType":"972","messageId":"973","endLine":14,"endColumn":26},{"ruleId":"970","severity":1,"message":"984","line":15,"column":24,"nodeType":"972","messageId":"973","endLine":15,"endColumn":41},{"ruleId":"970","severity":1,"message":"999","line":16,"column":13,"nodeType":"972","messageId":"973","endLine":16,"endColumn":24},{"ruleId":"970","severity":1,"message":"1000","line":17,"column":13,"nodeType":"972","messageId":"973","endLine":17,"endColumn":23},{"ruleId":"970","severity":1,"message":"1001","line":18,"column":11,"nodeType":"972","messageId":"973","endLine":18,"endColumn":19},{"ruleId":"970","severity":1,"message":"1002","line":27,"column":10,"nodeType":"972","messageId":"973","endLine":27,"endColumn":15},{"ruleId":"970","severity":1,"message":"975","line":27,"column":17,"nodeType":"972","messageId":"973","endLine":27,"endColumn":27},{"ruleId":"970","severity":1,"message":"1003","line":27,"column":29,"nodeType":"972","messageId":"973","endLine":27,"endColumn":35},{"ruleId":"970","severity":1,"message":"1004","line":28,"column":8,"nodeType":"972","messageId":"973","endLine":28,"endColumn":20},{"ruleId":"970","severity":1,"message":"1005","line":29,"column":8,"nodeType":"972","messageId":"973","endLine":29,"endColumn":18},{"ruleId":"970","severity":1,"message":"1006","line":37,"column":27,"nodeType":"972","messageId":"973","endLine":37,"endColumn":34},{"ruleId":"970","severity":1,"message":"1007","line":39,"column":8,"nodeType":"972","messageId":"973","endLine":39,"endColumn":12},{"ruleId":"970","severity":1,"message":"1008","line":41,"column":7,"nodeType":"972","messageId":"973","endLine":41,"endColumn":15},{"ruleId":"970","severity":1,"message":"1009","line":72,"column":7,"nodeType":"972","messageId":"973","endLine":72,"endColumn":20},{"ruleId":"970","severity":1,"message":"1010","line":100,"column":7,"nodeType":"972","messageId":"973","endLine":100,"endColumn":19},{"ruleId":"970","severity":1,"message":"1011","line":103,"column":8,"nodeType":"972","messageId":"973","endLine":103,"endColumn":16},{"ruleId":"970","severity":1,"message":"1012","line":103,"column":18,"nodeType":"972","messageId":"973","endLine":103,"endColumn":29},{"ruleId":"970","severity":1,"message":"1013","line":104,"column":8,"nodeType":"972","messageId":"973","endLine":104,"endColumn":21},{"ruleId":"970","severity":1,"message":"1014","line":104,"column":23,"nodeType":"972","messageId":"973","endLine":104,"endColumn":39},{"ruleId":"970","severity":1,"message":"1015","line":105,"column":8,"nodeType":"972","messageId":"973","endLine":105,"endColumn":25},{"ruleId":"970","severity":1,"message":"1016","line":105,"column":27,"nodeType":"972","messageId":"973","endLine":105,"endColumn":47},{"ruleId":"970","severity":1,"message":"1017","line":106,"column":8,"nodeType":"972","messageId":"973","endLine":106,"endColumn":29},{"ruleId":"970","severity":1,"message":"1018","line":106,"column":31,"nodeType":"972","messageId":"973","endLine":106,"endColumn":55},{"ruleId":"970","severity":1,"message":"1019","line":107,"column":8,"nodeType":"972","messageId":"973","endLine":107,"endColumn":19},{"ruleId":"970","severity":1,"message":"1020","line":107,"column":21,"nodeType":"972","messageId":"973","endLine":107,"endColumn":35},{"ruleId":"970","severity":1,"message":"1021","line":108,"column":8,"nodeType":"972","messageId":"973","endLine":108,"endColumn":20},{"ruleId":"970","severity":1,"message":"1022","line":108,"column":22,"nodeType":"972","messageId":"973","endLine":108,"endColumn":35},{"ruleId":"970","severity":1,"message":"1003","line":2,"column":47,"nodeType":"972","messageId":"973","endLine":2,"endColumn":53},{"ruleId":"966","replacedBy":"1023"},{"ruleId":"968","replacedBy":"1024"},{"ruleId":"970","severity":1,"message":"1025","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":21},{"ruleId":"970","severity":1,"message":"1026","line":2,"column":23,"nodeType":"972","messageId":"973","endLine":2,"endColumn":33},{"ruleId":"970","severity":1,"message":"1027","line":2,"column":35,"nodeType":"972","messageId":"973","endLine":2,"endColumn":49},{"ruleId":"970","severity":1,"message":"1028","line":2,"column":51,"nodeType":"972","messageId":"973","endLine":2,"endColumn":56},{"ruleId":"970","severity":1,"message":"1029","line":2,"column":69,"nodeType":"972","messageId":"973","endLine":2,"endColumn":82},{"ruleId":"970","severity":1,"message":"1030","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":15},{"ruleId":"970","severity":1,"message":"1031","line":8,"column":40,"nodeType":"972","messageId":"973","endLine":8,"endColumn":45},{"ruleId":"970","severity":1,"message":"1032","line":2,"column":23,"nodeType":"972","messageId":"973","endLine":2,"endColumn":32},{"ruleId":"970","severity":1,"message":"977","line":2,"column":48,"nodeType":"972","messageId":"973","endLine":2,"endColumn":58},{"ruleId":"970","severity":1,"message":"1030","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":15},{"ruleId":"970","severity":1,"message":"1033","line":7,"column":37,"nodeType":"972","messageId":"973","endLine":7,"endColumn":42},{"ruleId":"970","severity":1,"message":"1031","line":7,"column":57,"nodeType":"972","messageId":"973","endLine":7,"endColumn":62},{"ruleId":"970","severity":1,"message":"1034","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":15},{"ruleId":"970","severity":1,"message":"1035","line":2,"column":17,"nodeType":"972","messageId":"973","endLine":2,"endColumn":21},{"ruleId":"970","severity":1,"message":"1036","line":11,"column":44,"nodeType":"972","messageId":"973","endLine":11,"endColumn":49},{"ruleId":"970","severity":1,"message":"1032","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":19},{"ruleId":"970","severity":1,"message":"1036","line":6,"column":30,"nodeType":"972","messageId":"973","endLine":6,"endColumn":35},{"ruleId":"970","severity":1,"message":"1034","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":15},{"ruleId":"970","severity":1,"message":"1035","line":2,"column":17,"nodeType":"972","messageId":"973","endLine":2,"endColumn":21},{"ruleId":"970","severity":1,"message":"1037","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1038","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":19},{"ruleId":"970","severity":1,"message":"975","line":7,"column":8,"nodeType":"972","messageId":"973","endLine":7,"endColumn":18},{"ruleId":"970","severity":1,"message":"1036","line":12,"column":23,"nodeType":"972","messageId":"973","endLine":12,"endColumn":28},{"ruleId":"970","severity":1,"message":"1034","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":15},{"ruleId":"970","severity":1,"message":"1035","line":2,"column":17,"nodeType":"972","messageId":"973","endLine":2,"endColumn":21},{"ruleId":"970","severity":1,"message":"1037","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1039","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":12},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":19},{"ruleId":"970","severity":1,"message":"1038","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":19},{"ruleId":"970","severity":1,"message":"1041","line":9,"column":8,"nodeType":"972","messageId":"973","endLine":9,"endColumn":13},{"ruleId":"970","severity":1,"message":"1042","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":17},{"ruleId":"970","severity":1,"message":"1043","line":12,"column":10,"nodeType":"972","messageId":"973","endLine":12,"endColumn":20},{"ruleId":"970","severity":1,"message":"1025","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":19},{"ruleId":"970","severity":1,"message":"1044","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":17},{"ruleId":"970","severity":1,"message":"1045","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":24},{"ruleId":"970","severity":1,"message":"1027","line":17,"column":8,"nodeType":"972","messageId":"973","endLine":17,"endColumn":22},{"ruleId":"970","severity":1,"message":"1046","line":18,"column":8,"nodeType":"972","messageId":"973","endLine":18,"endColumn":16},{"ruleId":"970","severity":1,"message":"1047","line":23,"column":7,"nodeType":"972","messageId":"973","endLine":23,"endColumn":13},{"ruleId":"970","severity":1,"message":"1047","line":33,"column":11,"nodeType":"972","messageId":"973","endLine":33,"endColumn":17},{"ruleId":"970","severity":1,"message":"1036","line":41,"column":59,"nodeType":"972","messageId":"973","endLine":41,"endColumn":64},{"ruleId":"970","severity":1,"message":"1048","line":43,"column":11,"nodeType":"972","messageId":"973","endLine":43,"endColumn":17},{"ruleId":"1049","severity":1,"message":"1050","line":47,"column":31,"nodeType":"1051","messageId":"1052","endLine":47,"endColumn":33},{"ruleId":"1053","severity":1,"message":"1054","line":49,"column":21,"nodeType":"1055","messageId":"1056","endLine":49,"endColumn":23},{"ruleId":"1053","severity":1,"message":"1057","line":55,"column":36,"nodeType":"1055","messageId":"1056","endLine":55,"endColumn":38},{"ruleId":"1049","severity":1,"message":"1050","line":62,"column":28,"nodeType":"1051","messageId":"1052","endLine":62,"endColumn":30},{"ruleId":"1049","severity":1,"message":"1050","line":70,"column":41,"nodeType":"1051","messageId":"1052","endLine":70,"endColumn":43},{"ruleId":"1053","severity":1,"message":"1057","line":81,"column":26,"nodeType":"1055","messageId":"1056","endLine":81,"endColumn":28},{"ruleId":"1049","severity":1,"message":"1050","line":84,"column":30,"nodeType":"1051","messageId":"1052","endLine":84,"endColumn":32},{"ruleId":"1053","severity":1,"message":"1057","line":107,"column":29,"nodeType":"1055","messageId":"1056","endLine":107,"endColumn":31},{"ruleId":"1049","severity":1,"message":"1050","line":120,"column":37,"nodeType":"1051","messageId":"1052","endLine":120,"endColumn":39},{"ruleId":"1053","severity":1,"message":"1057","line":121,"column":89,"nodeType":"1055","messageId":"1056","endLine":121,"endColumn":91},{"ruleId":"1053","severity":1,"message":"1057","line":126,"column":22,"nodeType":"1055","messageId":"1056","endLine":126,"endColumn":24},{"ruleId":"1049","severity":1,"message":"1050","line":134,"column":39,"nodeType":"1051","messageId":"1052","endLine":134,"endColumn":41},{"ruleId":"1053","severity":1,"message":"1057","line":135,"column":89,"nodeType":"1055","messageId":"1056","endLine":135,"endColumn":91},{"ruleId":"1053","severity":1,"message":"1057","line":143,"column":30,"nodeType":"1055","messageId":"1056","endLine":143,"endColumn":32},{"ruleId":"1058","severity":1,"message":"1059","line":156,"column":37,"nodeType":"1060","endLine":156,"endColumn":83},{"ruleId":"1053","severity":1,"message":"1057","line":13,"column":47,"nodeType":"1055","messageId":"1056","endLine":13,"endColumn":49},{"ruleId":"1053","severity":1,"message":"1054","line":20,"column":32,"nodeType":"1055","messageId":"1056","endLine":20,"endColumn":34},{"ruleId":"970","severity":1,"message":"1061","line":33,"column":7,"nodeType":"972","messageId":"973","endLine":33,"endColumn":15},{"ruleId":"1053","severity":1,"message":"1054","line":38,"column":22,"nodeType":"1055","messageId":"1056","endLine":38,"endColumn":24},{"ruleId":"970","severity":1,"message":"1062","line":1,"column":17,"nodeType":"972","messageId":"973","endLine":1,"endColumn":19},{"ruleId":"970","severity":1,"message":"1063","line":1,"column":21,"nodeType":"972","messageId":"973","endLine":1,"endColumn":32},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":34,"nodeType":"972","messageId":"973","endLine":1,"endColumn":43},{"ruleId":"970","severity":1,"message":"1041","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":15},{"ruleId":"970","severity":1,"message":"1065","line":2,"column":17,"nodeType":"972","messageId":"973","endLine":2,"endColumn":27},{"ruleId":"970","severity":1,"message":"1066","line":2,"column":29,"nodeType":"972","messageId":"973","endLine":2,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":2,"column":40,"nodeType":"972","messageId":"973","endLine":2,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":2,"column":50,"nodeType":"972","messageId":"973","endLine":2,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":2,"column":61,"nodeType":"972","messageId":"973","endLine":2,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":2,"column":74,"nodeType":"972","messageId":"973","endLine":2,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":2,"column":80,"nodeType":"972","messageId":"973","endLine":2,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":2,"column":93,"nodeType":"972","messageId":"973","endLine":2,"endColumn":107},{"ruleId":"970","severity":1,"message":"975","line":2,"column":109,"nodeType":"972","messageId":"973","endLine":2,"endColumn":119},{"ruleId":"970","severity":1,"message":"1070","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":14},{"ruleId":"970","severity":1,"message":"1071","line":8,"column":5,"nodeType":"972","messageId":"973","endLine":8,"endColumn":9},{"ruleId":"970","severity":1,"message":"1072","line":9,"column":5,"nodeType":"972","messageId":"973","endLine":9,"endColumn":28},{"ruleId":"970","severity":1,"message":"1073","line":18,"column":65,"nodeType":"972","messageId":"973","endLine":18,"endColumn":81},{"ruleId":"1053","severity":1,"message":"1057","line":26,"column":25,"nodeType":"1055","messageId":"1056","endLine":26,"endColumn":27},{"ruleId":"970","severity":1,"message":"1074","line":63,"column":25,"nodeType":"972","messageId":"973","endLine":63,"endColumn":28},{"ruleId":"970","severity":1,"message":"1075","line":79,"column":13,"nodeType":"972","messageId":"973","endLine":79,"endColumn":20},{"ruleId":"970","severity":1,"message":"1076","line":150,"column":7,"nodeType":"972","messageId":"973","endLine":150,"endColumn":27},{"ruleId":"970","severity":1,"message":"1077","line":151,"column":7,"nodeType":"972","messageId":"973","endLine":151,"endColumn":32},{"ruleId":"1053","severity":1,"message":"1057","line":171,"column":18,"nodeType":"1055","messageId":"1056","endLine":171,"endColumn":20},{"ruleId":"1053","severity":1,"message":"1057","line":253,"column":20,"nodeType":"1055","messageId":"1056","endLine":253,"endColumn":22},{"ruleId":"1053","severity":1,"message":"1057","line":255,"column":27,"nodeType":"1055","messageId":"1056","endLine":255,"endColumn":29},{"ruleId":"1053","severity":1,"message":"1057","line":258,"column":27,"nodeType":"1055","messageId":"1056","endLine":258,"endColumn":29},{"ruleId":"1053","severity":1,"message":"1057","line":261,"column":27,"nodeType":"1055","messageId":"1056","endLine":261,"endColumn":29},{"ruleId":"970","severity":1,"message":"1078","line":345,"column":9,"nodeType":"972","messageId":"973","endLine":345,"endColumn":12},{"ruleId":"970","severity":1,"message":"1079","line":372,"column":7,"nodeType":"972","messageId":"973","endLine":372,"endColumn":31},{"ruleId":"970","severity":1,"message":"1080","line":373,"column":7,"nodeType":"972","messageId":"973","endLine":373,"endColumn":41},{"ruleId":"970","severity":1,"message":"1081","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":11},{"ruleId":"970","severity":1,"message":"1082","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":12},{"ruleId":"970","severity":1,"message":"1083","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1084","line":7,"column":8,"nodeType":"972","messageId":"973","endLine":7,"endColumn":20},{"ruleId":"1053","severity":1,"message":"1057","line":86,"column":24,"nodeType":"1055","messageId":"1056","endLine":86,"endColumn":26},{"ruleId":"1058","severity":1,"message":"1059","line":87,"column":19,"nodeType":"1060","endLine":87,"endColumn":115},{"ruleId":"1053","severity":1,"message":"1057","line":88,"column":28,"nodeType":"1055","messageId":"1056","endLine":88,"endColumn":30},{"ruleId":"1058","severity":1,"message":"1059","line":89,"column":21,"nodeType":"1060","endLine":89,"endColumn":111},{"ruleId":"1053","severity":1,"message":"1057","line":90,"column":30,"nodeType":"1055","messageId":"1056","endLine":90,"endColumn":32},{"ruleId":"1058","severity":1,"message":"1059","line":91,"column":23,"nodeType":"1060","endLine":91,"endColumn":111},{"ruleId":"1058","severity":1,"message":"1059","line":92,"column":25,"nodeType":"1060","endLine":92,"endColumn":114},{"ruleId":"966","replacedBy":"1085"},{"ruleId":"968","replacedBy":"1086"},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1088","line":5,"column":13,"nodeType":"972","messageId":"973","endLine":5,"endColumn":17},{"ruleId":"970","severity":1,"message":"1089","line":10,"column":8,"nodeType":"972","messageId":"973","endLine":10,"endColumn":12},{"ruleId":"970","severity":1,"message":"1090","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":12},{"ruleId":"970","severity":1,"message":"1091","line":13,"column":40,"nodeType":"972","messageId":"973","endLine":13,"endColumn":47},{"ruleId":"970","severity":1,"message":"1092","line":13,"column":92,"nodeType":"972","messageId":"973","endLine":13,"endColumn":111},{"ruleId":"1093","severity":1,"message":"1094","line":132,"column":14,"nodeType":"972","messageId":"1095","endLine":132,"endColumn":15},{"ruleId":"1049","severity":1,"message":"1050","line":174,"column":29,"nodeType":"1051","messageId":"1052","endLine":174,"endColumn":31},{"ruleId":"966","replacedBy":"1096"},{"ruleId":"968","replacedBy":"1097"},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1108","line":39,"column":11,"nodeType":"972","messageId":"973","endLine":39,"endColumn":18},{"ruleId":"970","severity":1,"message":"1109","line":44,"column":24,"nodeType":"972","messageId":"973","endLine":44,"endColumn":37},{"ruleId":"970","severity":1,"message":"1110","line":46,"column":30,"nodeType":"972","messageId":"973","endLine":46,"endColumn":49},{"ruleId":"970","severity":1,"message":"1111","line":48,"column":11,"nodeType":"972","messageId":"973","endLine":48,"endColumn":17},{"ruleId":"1049","severity":1,"message":"1050","line":53,"column":24,"nodeType":"1051","messageId":"1052","endLine":53,"endColumn":26},{"ruleId":"1053","severity":1,"message":"1057","line":56,"column":23,"nodeType":"1055","messageId":"1056","endLine":56,"endColumn":25},{"ruleId":"1058","severity":1,"message":"1059","line":97,"column":25,"nodeType":"1060","endLine":97,"endColumn":83},{"ruleId":"1112","severity":1,"message":"1113","line":113,"column":8,"nodeType":"1114","endLine":113,"endColumn":17,"suggestions":"1115"},{"ruleId":"966","replacedBy":"1116"},{"ruleId":"968","replacedBy":"1117"},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1108","line":38,"column":11,"nodeType":"972","messageId":"973","endLine":38,"endColumn":18},{"ruleId":"970","severity":1,"message":"1118","line":40,"column":12,"nodeType":"972","messageId":"973","endLine":40,"endColumn":19},{"ruleId":"970","severity":1,"message":"1119","line":40,"column":21,"nodeType":"972","messageId":"973","endLine":40,"endColumn":31},{"ruleId":"970","severity":1,"message":"1120","line":42,"column":12,"nodeType":"972","messageId":"973","endLine":42,"endColumn":20},{"ruleId":"970","severity":1,"message":"1111","line":44,"column":11,"nodeType":"972","messageId":"973","endLine":44,"endColumn":17},{"ruleId":"970","severity":1,"message":"1121","line":4,"column":10,"nodeType":"972","messageId":"973","endLine":4,"endColumn":23},{"ruleId":"970","severity":1,"message":"1091","line":4,"column":40,"nodeType":"972","messageId":"973","endLine":4,"endColumn":47},{"ruleId":"970","severity":1,"message":"1122","line":4,"column":72,"nodeType":"972","messageId":"973","endLine":4,"endColumn":90},{"ruleId":"970","severity":1,"message":"1092","line":4,"column":92,"nodeType":"972","messageId":"973","endLine":4,"endColumn":111},{"ruleId":"970","severity":1,"message":"1123","line":4,"column":113,"nodeType":"972","messageId":"973","endLine":4,"endColumn":124},{"ruleId":"970","severity":1,"message":"1124","line":4,"column":126,"nodeType":"972","messageId":"973","endLine":4,"endColumn":148},{"ruleId":"970","severity":1,"message":"1125","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":10},{"ruleId":"970","severity":1,"message":"1126","line":10,"column":7,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1127","line":17,"column":7,"nodeType":"972","messageId":"973","endLine":17,"endColumn":13},{"ruleId":"970","severity":1,"message":"1128","line":21,"column":7,"nodeType":"972","messageId":"973","endLine":21,"endColumn":13},{"ruleId":"970","severity":1,"message":"1129","line":45,"column":9,"nodeType":"972","messageId":"973","endLine":45,"endColumn":12},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1130","line":9,"column":8,"nodeType":"972","messageId":"973","endLine":9,"endColumn":16},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1131","line":21,"column":13,"nodeType":"972","messageId":"973","endLine":21,"endColumn":24},{"ruleId":"970","severity":1,"message":"1132","line":22,"column":9,"nodeType":"972","messageId":"973","endLine":22,"endColumn":14},{"ruleId":"970","severity":1,"message":"1108","line":40,"column":11,"nodeType":"972","messageId":"973","endLine":40,"endColumn":18},{"ruleId":"970","severity":1,"message":"1118","line":42,"column":12,"nodeType":"972","messageId":"973","endLine":42,"endColumn":19},{"ruleId":"970","severity":1,"message":"1119","line":42,"column":21,"nodeType":"972","messageId":"973","endLine":42,"endColumn":31},{"ruleId":"970","severity":1,"message":"1133","line":43,"column":21,"nodeType":"972","messageId":"973","endLine":43,"endColumn":31},{"ruleId":"970","severity":1,"message":"1134","line":44,"column":12,"nodeType":"972","messageId":"973","endLine":44,"endColumn":19},{"ruleId":"970","severity":1,"message":"1135","line":44,"column":21,"nodeType":"972","messageId":"973","endLine":44,"endColumn":31},{"ruleId":"970","severity":1,"message":"1136","line":45,"column":12,"nodeType":"972","messageId":"973","endLine":45,"endColumn":22},{"ruleId":"970","severity":1,"message":"1109","line":45,"column":24,"nodeType":"972","messageId":"973","endLine":45,"endColumn":37},{"ruleId":"970","severity":1,"message":"1137","line":47,"column":12,"nodeType":"972","messageId":"973","endLine":47,"endColumn":28},{"ruleId":"970","severity":1,"message":"1110","line":47,"column":30,"nodeType":"972","messageId":"973","endLine":47,"endColumn":49},{"ruleId":"966","replacedBy":"1138"},{"ruleId":"968","replacedBy":"1139"},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1140","line":1,"column":25,"nodeType":"972","messageId":"973","endLine":1,"endColumn":30},{"ruleId":"970","severity":1,"message":"1141","line":1,"column":32,"nodeType":"972","messageId":"973","endLine":1,"endColumn":48},{"ruleId":"970","severity":1,"message":"1088","line":2,"column":13,"nodeType":"972","messageId":"973","endLine":2,"endColumn":17},{"ruleId":"970","severity":1,"message":"1125","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":10},{"ruleId":"970","severity":1,"message":"1142","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":17},{"ruleId":"970","severity":1,"message":"1089","line":7,"column":8,"nodeType":"972","messageId":"973","endLine":7,"endColumn":12},{"ruleId":"970","severity":1,"message":"1090","line":8,"column":8,"nodeType":"972","messageId":"973","endLine":8,"endColumn":12},{"ruleId":"970","severity":1,"message":"1091","line":10,"column":40,"nodeType":"972","messageId":"973","endLine":10,"endColumn":47},{"ruleId":"970","severity":1,"message":"1092","line":10,"column":92,"nodeType":"972","messageId":"973","endLine":10,"endColumn":111},{"ruleId":"1053","severity":1,"message":"1057","line":100,"column":19,"nodeType":"1055","messageId":"1056","endLine":100,"endColumn":21},{"ruleId":"1049","severity":1,"message":"1050","line":107,"column":21,"nodeType":"1051","messageId":"1052","endLine":107,"endColumn":23},{"ruleId":"970","severity":1,"message":"1143","line":25,"column":7,"nodeType":"972","messageId":"973","endLine":25,"endColumn":13},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1108","line":40,"column":11,"nodeType":"972","messageId":"973","endLine":40,"endColumn":18},{"ruleId":"970","severity":1,"message":"1137","line":47,"column":12,"nodeType":"972","messageId":"973","endLine":47,"endColumn":28},{"ruleId":"970","severity":1,"message":"1110","line":47,"column":30,"nodeType":"972","messageId":"973","endLine":47,"endColumn":49},{"ruleId":"970","severity":1,"message":"1111","line":49,"column":11,"nodeType":"972","messageId":"973","endLine":49,"endColumn":17},{"ruleId":"1049","severity":1,"message":"1050","line":54,"column":24,"nodeType":"1051","messageId":"1052","endLine":54,"endColumn":26},{"ruleId":"1053","severity":1,"message":"1057","line":57,"column":23,"nodeType":"1055","messageId":"1056","endLine":57,"endColumn":25},{"ruleId":"1058","severity":1,"message":"1059","line":94,"column":25,"nodeType":"1060","endLine":94,"endColumn":83},{"ruleId":"1112","severity":1,"message":"1113","line":110,"column":8,"nodeType":"1114","endLine":110,"endColumn":17,"suggestions":"1144"},{"ruleId":"970","severity":1,"message":"1145","line":113,"column":17,"nodeType":"972","messageId":"973","endLine":113,"endColumn":21},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1088","line":2,"column":13,"nodeType":"972","messageId":"973","endLine":2,"endColumn":17},{"ruleId":"970","severity":1,"message":"1089","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":12},{"ruleId":"970","severity":1,"message":"1091","line":6,"column":40,"nodeType":"972","messageId":"973","endLine":6,"endColumn":47},{"ruleId":"970","severity":1,"message":"1092","line":6,"column":92,"nodeType":"972","messageId":"973","endLine":6,"endColumn":111},{"ruleId":"970","severity":1,"message":"1090","line":8,"column":8,"nodeType":"972","messageId":"973","endLine":8,"endColumn":12},{"ruleId":"1093","severity":1,"message":"1094","line":114,"column":14,"nodeType":"972","messageId":"1095","endLine":114,"endColumn":15},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1130","line":9,"column":8,"nodeType":"972","messageId":"973","endLine":9,"endColumn":16},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1108","line":38,"column":11,"nodeType":"972","messageId":"973","endLine":38,"endColumn":18},{"ruleId":"970","severity":1,"message":"1118","line":40,"column":12,"nodeType":"972","messageId":"973","endLine":40,"endColumn":19},{"ruleId":"970","severity":1,"message":"1119","line":40,"column":21,"nodeType":"972","messageId":"973","endLine":40,"endColumn":31},{"ruleId":"970","severity":1,"message":"1133","line":41,"column":21,"nodeType":"972","messageId":"973","endLine":41,"endColumn":31},{"ruleId":"970","severity":1,"message":"1134","line":42,"column":12,"nodeType":"972","messageId":"973","endLine":42,"endColumn":19},{"ruleId":"970","severity":1,"message":"1135","line":42,"column":21,"nodeType":"972","messageId":"973","endLine":42,"endColumn":31},{"ruleId":"970","severity":1,"message":"1136","line":43,"column":12,"nodeType":"972","messageId":"973","endLine":43,"endColumn":22},{"ruleId":"970","severity":1,"message":"1109","line":43,"column":24,"nodeType":"972","messageId":"973","endLine":43,"endColumn":37},{"ruleId":"970","severity":1,"message":"1137","line":45,"column":12,"nodeType":"972","messageId":"973","endLine":45,"endColumn":28},{"ruleId":"970","severity":1,"message":"1110","line":45,"column":30,"nodeType":"972","messageId":"973","endLine":45,"endColumn":49},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1140","line":1,"column":25,"nodeType":"972","messageId":"973","endLine":1,"endColumn":30},{"ruleId":"970","severity":1,"message":"1141","line":1,"column":32,"nodeType":"972","messageId":"973","endLine":1,"endColumn":48},{"ruleId":"970","severity":1,"message":"1088","line":2,"column":13,"nodeType":"972","messageId":"973","endLine":2,"endColumn":17},{"ruleId":"970","severity":1,"message":"1125","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":10},{"ruleId":"970","severity":1,"message":"1142","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":17},{"ruleId":"970","severity":1,"message":"1089","line":7,"column":8,"nodeType":"972","messageId":"973","endLine":7,"endColumn":12},{"ruleId":"970","severity":1,"message":"1090","line":8,"column":8,"nodeType":"972","messageId":"973","endLine":8,"endColumn":12},{"ruleId":"970","severity":1,"message":"1146","line":9,"column":13,"nodeType":"972","messageId":"973","endLine":9,"endColumn":21},{"ruleId":"970","severity":1,"message":"1121","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":23},{"ruleId":"970","severity":1,"message":"1091","line":10,"column":40,"nodeType":"972","messageId":"973","endLine":10,"endColumn":47},{"ruleId":"970","severity":1,"message":"1122","line":10,"column":72,"nodeType":"972","messageId":"973","endLine":10,"endColumn":90},{"ruleId":"970","severity":1,"message":"1092","line":10,"column":92,"nodeType":"972","messageId":"973","endLine":10,"endColumn":111},{"ruleId":"970","severity":1,"message":"1074","line":87,"column":9,"nodeType":"972","messageId":"973","endLine":87,"endColumn":12},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"975","line":5,"column":109,"nodeType":"972","messageId":"973","endLine":5,"endColumn":119},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1108","line":39,"column":11,"nodeType":"972","messageId":"973","endLine":39,"endColumn":18},{"ruleId":"970","severity":1,"message":"1118","line":41,"column":12,"nodeType":"972","messageId":"973","endLine":41,"endColumn":19},{"ruleId":"970","severity":1,"message":"1119","line":41,"column":21,"nodeType":"972","messageId":"973","endLine":41,"endColumn":31},{"ruleId":"970","severity":1,"message":"1147","line":44,"column":12,"nodeType":"972","messageId":"973","endLine":44,"endColumn":17},{"ruleId":"970","severity":1,"message":"1148","line":44,"column":19,"nodeType":"972","messageId":"973","endLine":44,"endColumn":27},{"ruleId":"970","severity":1,"message":"1149","line":45,"column":12,"nodeType":"972","messageId":"973","endLine":45,"endColumn":17},{"ruleId":"970","severity":1,"message":"1150","line":45,"column":19,"nodeType":"972","messageId":"973","endLine":45,"endColumn":27},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1088","line":2,"column":13,"nodeType":"972","messageId":"973","endLine":2,"endColumn":17},{"ruleId":"970","severity":1,"message":"1125","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":10},{"ruleId":"970","severity":1,"message":"1089","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":12},{"ruleId":"970","severity":1,"message":"1091","line":6,"column":40,"nodeType":"972","messageId":"973","endLine":6,"endColumn":47},{"ruleId":"970","severity":1,"message":"1092","line":6,"column":92,"nodeType":"972","messageId":"973","endLine":6,"endColumn":111},{"ruleId":"970","severity":1,"message":"1151","line":7,"column":10,"nodeType":"972","messageId":"973","endLine":7,"endColumn":31},{"ruleId":"970","severity":1,"message":"1090","line":8,"column":8,"nodeType":"972","messageId":"973","endLine":8,"endColumn":12},{"ruleId":"970","severity":1,"message":"1152","line":12,"column":13,"nodeType":"972","messageId":"973","endLine":12,"endColumn":23},{"ruleId":"1053","severity":1,"message":"1054","line":255,"column":29,"nodeType":"1055","messageId":"1056","endLine":255,"endColumn":31},{"ruleId":"970","severity":1,"message":"1127","line":13,"column":7,"nodeType":"972","messageId":"973","endLine":13,"endColumn":13},{"ruleId":"970","severity":1,"message":"1087","line":1,"column":10,"nodeType":"972","messageId":"973","endLine":1,"endColumn":23},{"ruleId":"970","severity":1,"message":"1140","line":1,"column":25,"nodeType":"972","messageId":"973","endLine":1,"endColumn":30},{"ruleId":"970","severity":1,"message":"1141","line":1,"column":32,"nodeType":"972","messageId":"973","endLine":1,"endColumn":48},{"ruleId":"970","severity":1,"message":"1088","line":2,"column":13,"nodeType":"972","messageId":"973","endLine":2,"endColumn":17},{"ruleId":"970","severity":1,"message":"1125","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":10},{"ruleId":"970","severity":1,"message":"1153","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":13},{"ruleId":"970","severity":1,"message":"1089","line":5,"column":8,"nodeType":"972","messageId":"973","endLine":5,"endColumn":12},{"ruleId":"970","severity":1,"message":"1121","line":6,"column":10,"nodeType":"972","messageId":"973","endLine":6,"endColumn":23},{"ruleId":"970","severity":1,"message":"1091","line":6,"column":40,"nodeType":"972","messageId":"973","endLine":6,"endColumn":47},{"ruleId":"970","severity":1,"message":"1122","line":6,"column":72,"nodeType":"972","messageId":"973","endLine":6,"endColumn":90},{"ruleId":"970","severity":1,"message":"1092","line":6,"column":92,"nodeType":"972","messageId":"973","endLine":6,"endColumn":111},{"ruleId":"970","severity":1,"message":"1123","line":6,"column":113,"nodeType":"972","messageId":"973","endLine":6,"endColumn":124},{"ruleId":"970","severity":1,"message":"1124","line":6,"column":126,"nodeType":"972","messageId":"973","endLine":6,"endColumn":148},{"ruleId":"970","severity":1,"message":"1090","line":8,"column":8,"nodeType":"972","messageId":"973","endLine":8,"endColumn":12},{"ruleId":"970","severity":1,"message":"1146","line":10,"column":13,"nodeType":"972","messageId":"973","endLine":10,"endColumn":21},{"ruleId":"970","severity":1,"message":"1154","line":12,"column":7,"nodeType":"972","messageId":"973","endLine":12,"endColumn":46},{"ruleId":"970","severity":1,"message":"1155","line":18,"column":7,"nodeType":"972","messageId":"973","endLine":18,"endColumn":21},{"ruleId":"970","severity":1,"message":"1129","line":21,"column":9,"nodeType":"972","messageId":"973","endLine":21,"endColumn":12},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1108","line":39,"column":11,"nodeType":"972","messageId":"973","endLine":39,"endColumn":18},{"ruleId":"970","severity":1,"message":"1119","line":42,"column":21,"nodeType":"972","messageId":"973","endLine":42,"endColumn":31},{"ruleId":"970","severity":1,"message":"1120","line":44,"column":12,"nodeType":"972","messageId":"973","endLine":44,"endColumn":20},{"ruleId":"970","severity":1,"message":"1156","line":107,"column":11,"nodeType":"972","messageId":"973","endLine":107,"endColumn":12},{"ruleId":"970","severity":1,"message":"1157","line":3,"column":22,"nodeType":"972","messageId":"973","endLine":3,"endColumn":30},{"ruleId":"970","severity":1,"message":"1087","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":23},{"ruleId":"970","severity":1,"message":"1140","line":5,"column":25,"nodeType":"972","messageId":"973","endLine":5,"endColumn":30},{"ruleId":"970","severity":1,"message":"1141","line":5,"column":32,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1158","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":19},{"ruleId":"1053","severity":1,"message":"1057","line":143,"column":42,"nodeType":"1055","messageId":"1056","endLine":143,"endColumn":44},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1100","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":16},{"ruleId":"970","severity":1,"message":"1101","line":7,"column":13,"nodeType":"972","messageId":"973","endLine":7,"endColumn":26},{"ruleId":"970","severity":1,"message":"1102","line":8,"column":13,"nodeType":"972","messageId":"973","endLine":8,"endColumn":26},{"ruleId":"970","severity":1,"message":"1130","line":9,"column":8,"nodeType":"972","messageId":"973","endLine":9,"endColumn":16},{"ruleId":"970","severity":1,"message":"1103","line":10,"column":10,"nodeType":"972","messageId":"973","endLine":10,"endColumn":16},{"ruleId":"970","severity":1,"message":"1030","line":11,"column":8,"nodeType":"972","messageId":"973","endLine":11,"endColumn":15},{"ruleId":"970","severity":1,"message":"1104","line":12,"column":8,"nodeType":"972","messageId":"973","endLine":12,"endColumn":13},{"ruleId":"970","severity":1,"message":"1105","line":13,"column":8,"nodeType":"972","messageId":"973","endLine":13,"endColumn":24},{"ruleId":"970","severity":1,"message":"1106","line":14,"column":8,"nodeType":"972","messageId":"973","endLine":14,"endColumn":17},{"ruleId":"970","severity":1,"message":"1004","line":15,"column":8,"nodeType":"972","messageId":"973","endLine":15,"endColumn":20},{"ruleId":"970","severity":1,"message":"1107","line":16,"column":8,"nodeType":"972","messageId":"973","endLine":16,"endColumn":21},{"ruleId":"970","severity":1,"message":"1081","line":17,"column":16,"nodeType":"972","messageId":"973","endLine":17,"endColumn":19},{"ruleId":"970","severity":1,"message":"1046","line":17,"column":21,"nodeType":"972","messageId":"973","endLine":17,"endColumn":29},{"ruleId":"970","severity":1,"message":"1131","line":21,"column":13,"nodeType":"972","messageId":"973","endLine":21,"endColumn":24},{"ruleId":"970","severity":1,"message":"1108","line":40,"column":11,"nodeType":"972","messageId":"973","endLine":40,"endColumn":18},{"ruleId":"970","severity":1,"message":"1118","line":42,"column":12,"nodeType":"972","messageId":"973","endLine":42,"endColumn":19},{"ruleId":"970","severity":1,"message":"1119","line":42,"column":21,"nodeType":"972","messageId":"973","endLine":42,"endColumn":31},{"ruleId":"970","severity":1,"message":"1133","line":43,"column":21,"nodeType":"972","messageId":"973","endLine":43,"endColumn":31},{"ruleId":"970","severity":1,"message":"1134","line":44,"column":12,"nodeType":"972","messageId":"973","endLine":44,"endColumn":19},{"ruleId":"970","severity":1,"message":"1135","line":44,"column":21,"nodeType":"972","messageId":"973","endLine":44,"endColumn":31},{"ruleId":"970","severity":1,"message":"1137","line":47,"column":12,"nodeType":"972","messageId":"973","endLine":47,"endColumn":28},{"ruleId":"970","severity":1,"message":"1110","line":47,"column":30,"nodeType":"972","messageId":"973","endLine":47,"endColumn":49},{"ruleId":"970","severity":1,"message":"1145","line":65,"column":17,"nodeType":"972","messageId":"973","endLine":65,"endColumn":21},{"ruleId":"970","severity":1,"message":"1087","line":2,"column":10,"nodeType":"972","messageId":"973","endLine":2,"endColumn":23},{"ruleId":"970","severity":1,"message":"1140","line":2,"column":25,"nodeType":"972","messageId":"973","endLine":2,"endColumn":30},{"ruleId":"970","severity":1,"message":"1141","line":2,"column":32,"nodeType":"972","messageId":"973","endLine":2,"endColumn":48},{"ruleId":"970","severity":1,"message":"1088","line":3,"column":13,"nodeType":"972","messageId":"973","endLine":3,"endColumn":17},{"ruleId":"970","severity":1,"message":"1089","line":6,"column":8,"nodeType":"972","messageId":"973","endLine":6,"endColumn":12},{"ruleId":"970","severity":1,"message":"1121","line":7,"column":10,"nodeType":"972","messageId":"973","endLine":7,"endColumn":23},{"ruleId":"970","severity":1,"message":"1091","line":7,"column":40,"nodeType":"972","messageId":"973","endLine":7,"endColumn":47},{"ruleId":"970","severity":1,"message":"1122","line":7,"column":72,"nodeType":"972","messageId":"973","endLine":7,"endColumn":90},{"ruleId":"970","severity":1,"message":"1092","line":7,"column":92,"nodeType":"972","messageId":"973","endLine":7,"endColumn":111},{"ruleId":"970","severity":1,"message":"1090","line":9,"column":8,"nodeType":"972","messageId":"973","endLine":9,"endColumn":12},{"ruleId":"970","severity":1,"message":"1154","line":12,"column":7,"nodeType":"972","messageId":"973","endLine":12,"endColumn":46},{"ruleId":"970","severity":1,"message":"1087","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":23},{"ruleId":"970","severity":1,"message":"1159","line":7,"column":21,"nodeType":"972","messageId":"973","endLine":7,"endColumn":29},{"ruleId":"970","severity":1,"message":"1160","line":9,"column":7,"nodeType":"972","messageId":"973","endLine":9,"endColumn":32},{"ruleId":"1049","severity":1,"message":"1050","line":35,"column":38,"nodeType":"1051","messageId":"1052","endLine":35,"endColumn":40},{"ruleId":"1053","severity":1,"message":"1057","line":40,"column":28,"nodeType":"1055","messageId":"1056","endLine":40,"endColumn":30},{"ruleId":"970","severity":1,"message":"1161","line":1,"column":17,"nodeType":"972","messageId":"973","endLine":1,"endColumn":25},{"ruleId":"970","severity":1,"message":"1064","line":1,"column":27,"nodeType":"972","messageId":"973","endLine":1,"endColumn":36},{"ruleId":"970","severity":1,"message":"1098","line":3,"column":8,"nodeType":"972","messageId":"973","endLine":3,"endColumn":18},{"ruleId":"970","severity":1,"message":"1099","line":4,"column":8,"nodeType":"972","messageId":"973","endLine":4,"endColumn":32},{"ruleId":"970","severity":1,"message":"1041","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":15},{"ruleId":"970","severity":1,"message":"1066","line":5,"column":29,"nodeType":"972","messageId":"973","endLine":5,"endColumn":38},{"ruleId":"970","severity":1,"message":"1067","line":5,"column":40,"nodeType":"972","messageId":"973","endLine":5,"endColumn":48},{"ruleId":"970","severity":1,"message":"1068","line":5,"column":50,"nodeType":"972","messageId":"973","endLine":5,"endColumn":59},{"ruleId":"970","severity":1,"message":"1040","line":5,"column":61,"nodeType":"972","messageId":"973","endLine":5,"endColumn":72},{"ruleId":"970","severity":1,"message":"1039","line":5,"column":74,"nodeType":"972","messageId":"973","endLine":5,"endColumn":78},{"ruleId":"970","severity":1,"message":"1038","line":5,"column":80,"nodeType":"972","messageId":"973","endLine":5,"endColumn":91},{"ruleId":"970","severity":1,"message":"1069","line":5,"column":93,"nodeType":"972","messageId":"973","endLine":5,"endColumn":107},{"ruleId":"970","severity":1,"message":"1003","line":5,"column":121,"nodeType":"972","messageId":"973","endLine":5,"endColumn":127},{"ruleId":"970","severity":1,"message":"1162","line":8,"column":7,"nodeType":"972","messageId":"973","endLine":8,"endColumn":16},{"ruleId":"1163","severity":1,"message":"1164","line":71,"column":35,"nodeType":"1165","messageId":"1166","endLine":73,"endColumn":22},{"ruleId":"970","severity":1,"message":"1087","line":5,"column":10,"nodeType":"972","messageId":"973","endLine":5,"endColumn":23},{"ruleId":"1049","severity":1,"message":"1050","line":32,"column":38,"nodeType":"1051","messageId":"1052","endLine":32,"endColumn":40},{"ruleId":"1053","severity":1,"message":"1057","line":36,"column":23,"nodeType":"1055","messageId":"1056","endLine":36,"endColumn":25},{"ruleId":"1053","severity":1,"message":"1057","line":36,"column":43,"nodeType":"1055","messageId":"1056","endLine":36,"endColumn":45},"no-native-reassign",["1167"],"no-negated-in-lhs",["1168"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'CssBaseline' is defined but never used.","'Typography' is defined but never used.","'theme' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'Icon' is defined but never used.","'FacebookIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'GithubIcon' is defined but never used.","'HomeIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'UIElementsIcon' is defined but never used.","'TableIcon' is defined but never used.","'SupportIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'FAQIcon' is defined but never used.","'Dot' is defined but never used.","'mock' is defined but never used.","'Table' is defined but never used.","'BigStat' is defined but never used.","'InputBase' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Fab' is defined but never used.","'MailIcon' is defined but never used.","'AccountIcon' is defined but never used.","'SearchIcon' is defined but never used.","'SendIcon' is defined but never used.","'Badge' is defined but never used.","'Button' is defined but never used.","'Notification' is defined but never used.","'UserAvatar' is defined but never used.","'signOut' is defined but never used.","'Logo' is defined but never used.","'messages' is assigned a value but never used.","'notifications' is assigned a value but never used.","'userDispatch' is assigned a value but never used.","'mailMenu' is assigned a value but never used.","'setMailMenu' is assigned a value but never used.","'isMailsUnread' is assigned a value but never used.","'setIsMailsUnread' is assigned a value but never used.","'notificationsMenu' is assigned a value but never used.","'setNotificationsMenu' is assigned a value but never used.","'isNotificationsUnread' is assigned a value but never used.","'setIsNotificationsUnread' is assigned a value but never used.","'profileMenu' is assigned a value but never used.","'setProfileMenu' is assigned a value but never used.","'isSearchOpen' is assigned a value but never used.","'setSearchOpen' is assigned a value but never used.",["1167"],["1168"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'Input' is defined but never used.","'OutlinedInput' is defined but never used.","'AddIcon' is defined but never used.","'items' is assigned a value but never used.","'FormLabel' is defined but never used.","'value' is assigned a value but never used.","'Stack' is defined but never used.","'Chip' is defined but never used.","'other' is assigned a value but never used.","'CreateIcon' is defined but never used.","'CardContent' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'Paper' is defined but never used.","'PropTypes' is defined but never used.","'withStyles' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'styles' is assigned a value but never used.","'format' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'MAX_ROWS' is assigned a value but never used.","'FC' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","'TableBody' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'InputAdornment' is defined but never used.","'config' is defined but never used.","'mint' is defined but never used.","'get_available_nfts_pass' is defined but never used.","'setAvailable_nft' is assigned a value but never used.","'rtn' is assigned a value but never used.","'balance' is assigned a value but never used.","'FINAL_PRICE_STATE_ok' is assigned a value but never used.","'FINAL_PRICE_STATE_sys_err' is assigned a value but never used.","'res' is assigned a value but never used.","'STATE_UPDATE_METADATA_OK' is assigned a value but never used.","'STATE_UPDATE_METADATA_SYSTEM_ERROR' is assigned a value but never used.","'Box' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.",["1167"],["1168"],"'AccountLayout' is defined but never used.","'web3' is defined but never used.","'bs58' is defined but never used.","'host' is defined but never used.","'Keypair' is defined but never used.","'SYSVAR_CLOCK_PUBKEY' is defined but never used.","no-redeclare","'i' is already defined.","redeclared",["1167"],["1168"],"'PageHeader' is defined but never used.","'PeopleOutlineTwoToneIcon' is defined but never used.","'useTable' is defined but never used.","'commonService' is defined but never used.","'tokenServices' is defined but never used.","'Search' is defined but never used.","'Popup' is defined but never used.","'EditOutlinedIcon' is defined but never used.","'CloseIcon' is defined but never used.","'ConfirmDialog' is defined but never used.","'classes' is assigned a value but never used.","'setTimeLength' is assigned a value but never used.","'setMax_nft_to_stake' is assigned a value but never used.","'onList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'x'. Either include it or remove the dependency array.","ArrayExpression",["1169"],["1167"],["1168"],"'records' is assigned a value but never used.","'setRecords' is assigned a value but never used.","'provider' is assigned a value but never used.","'SystemProgram' is defined but never used.","'SYSVAR_RENT_PUBKEY' is defined but never used.","'Transaction' is defined but never used.","'TransactionInstruction' is defined but never used.","'BN' is defined but never used.","'publicKey' is assigned a value but never used.","'uint64' is assigned a value but never used.","'LAYOUT' is assigned a value but never used.","'ixs' is assigned a value but never used.","'Controls' is defined but never used.","'SolmateList' is defined but never used.","'stake' is defined but never used.","'setContent' is assigned a value but never used.","'selects' is assigned a value but never used.","'setSelects' is assigned a value but never used.","'timeLength' is assigned a value but never used.","'max_nft_to_stake' is assigned a value but never used.",["1167"],["1168"],"'Token' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'generated' is defined but never used.","'config' is assigned a value but never used.",["1170"],"'name' is assigned a value but never used.","'splToken' is defined but never used.","'ciety' is assigned a value but never used.","'setCiety' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'V2_STAKED_DATA_LAYOUT' is defined but never used.","'DataLayout' is defined but never used.","'axios' is defined but never used.","'SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID' is assigned a value but never used.","'STATE_canceled' is assigned a value but never used.","'x' is assigned a value but never used.","'programs' is defined but never used.","'host_wallet' is defined but never used.","'Metadata' is assigned a value but never used.","'TOKEN_METADATA_PROGRAM_ID' is assigned a value but never used.","'useState' is defined but never used.","'useStyles' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","no-global-assign","no-unsafe-negation",{"desc":"1171","fix":"1172"},{"desc":"1171","fix":"1173"},"Update the dependencies array to be: [records, x]",{"range":"1174","text":"1175"},{"range":"1176","text":"1175"},[4137,4146],"[records, x]",[3925,3934]]